y
                this method.
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Zip.ZipSegmentedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Zip.ZipSegmentedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="P:Ionic.Zip.ZipSegmentedStream.CurrentName">
            <summary>
              Name of the filesystem file corresponding to the current segment.
            </summary>
            <remarks>
              <para>
                The name is not always the name currently being used in the
                filesystem.  When rwMode is RwMode.Write, the filesystem file has a
                temporary name until the stream is closed or until the next segment is
                started.
              </para>
            </remarks>
        </member>
        <member name="T:Ionic.Zip.ComHelper">
            <summary>
            This class exposes a set of COM-accessible wrappers for static
            methods available on the ZipFile class.  You don't need this
            class unless you are using DotNetZip from a COM environment.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ComHelper.IsZipFile(System.String)">
            <summary>
             A wrapper for <see cref="M:Ionic.Zip.ZipFile.IsZipFile(System.String)">ZipFile.IsZipFile(string)</see>
            </summary>
            <param name="filename">The filename to of the zip file to check.</param>
            <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:Ionic.Zip.ComHelper.IsZipFileWithExtract(System.String)">
            <summary>
             A wrapper for <see cref="M:Ionic.Zip.ZipFile.IsZipFile(System.String,System.Boolean)">ZipFile.IsZipFile(string, bool)</see>
            </summary>
            <remarks>
            We cannot use "overloaded" Method names in COM interop.
            So, here, we use a unique name.
            </remarks>
            <param name="filename">The filename to of the zip file to check.</param>
            <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:Ionic.Zip.ComHelper.CheckZip(System.String)">
             <summary>
              A wrapper for <see cref="M:Ionic.Zip.ZipFile.CheckZip(System.String)">ZipFile.CheckZip(string)</see>
             </summary>
             <param name="filename">The filename to of the zip file to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
        </member>
        <member name="M:Ionic.Zip.ComHelper.CheckZipPassword(System.String,System.String)">
             <summary>
              A COM-friendly wrapper for the static method <see cref="M:Ionic.Zip.ZipFile.CheckZipPassword(System.String,System.String)"/>.
             </summary>
            
             <param name="filename">The filename to of the zip file to check.</param>
            
             <param name="password">The password to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
        </member>
        <member name="M:Ionic.Zip.ComHelper.FixZipDirectory(System.String)">
            <summary>
             A wrapper for <see cref="M:Ionic.Zip.ZipFile.FixZipDirectory(System.String)">ZipFile.FixZipDirectory(string)</see>
            </summary>
            <param name="filename">The filename to of the zip file to fix.</param>
        </member>
        <member name="M:Ionic.Zip.ComHelper.GetZipLibraryVersion">
            <summary>
             A wrapper for <see cref="P:Ionic.Zip.ZipFile.LibraryVersion">ZipFile.LibraryVersion</see>
            </summary>
            <returns>
             the version number on the DotNetZip assembly, formatted as a string.
            </returns>
        </member>
        <member name="T:Ionic.Zip.ZipErrorAction">
             <summary>
             An enum providing the options when an error occurs during opening or reading
             of a file or directory that is being saved to a zip file. 
             </summary>
            
             <remarks>
              <para>
                This enum describes the actions that the library can take when an error occurs
                opening or reading a file, as it is being saved into a Zip archive. 
              </para>
            
              <para>
                 In some cases an error will occur when DotNetZip tries to open a file to be
                 added to the zip archive.  In other cases, an error might occur after the
                 file has been successfully opened, while DotNetZip is reading the file.
              </para>
             
              <para>
                The first problem might occur when calling AddDirectory() on a directory
                that contains a Clipper .dbf file; the file is locked by Clipper and
                cannot be opened by another process. An example of the second problem is
                the ERROR_LOCK_VIOLATION that results when a file is opened by another
                process, but not locked, and a range lock has been taken on the file.
                Microsoft Outlook takes range locks on .PST files.
              </para>
             </remarks>
        </member>
        <member name="F:Ionic.Zip.ZipErrorAction.Throw">
            <summary>
            Throw an exception when an error occurs while zipping.  This is the default
            behavior.  (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipErrorAction.Skip">
            <summary>
            When an error occurs during zipping, for example a file cannot be opened,
            skip the file causing the error, and continue zipping.  (For COM clients,
            this is a 1.)
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipErrorAction.Retry">
            <summary>
            When an error occurs during zipping, for example a file cannot be opened,
            retry the operation that caused the error. Be careful with this option. If
            the error is not temporary, the library will retry forever.  (For COM
            clients, this is a 2.)
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipErrorAction.InvokeErrorEvent">
            <summary>
            When an error occurs, invoke the zipError event.  The event type used is
            <see cref="F:Ionic.Zip.ZipProgressEventType.Error_Saving"/>.  A typical use of this option:
            a GUI application may wish to pop up a dialog to allow the user to view the
            error that occurred, and choose an appropriate action.  After your
            processing in the error event, if you want to skip the file, set <see cref="P:Ionic.Zip.ZipEntry.ZipErrorAction"/> on the
            <c>ZipProgressEventArgs.CurrentEntry</c> to <c>Skip</c>.  If you want the
            exception to be thrown, set <c>ZipErrorAction</c> on the <c>CurrentEntry</c>
            to <c>Throw</c>.  If you want to cancel the zip, set
            <c>ZipProgressEventArgs.Cancel</c> to true.  Cancelling differs from using
            Skip in that a cancel will not save any further entries, if there are any.
            (For COM clients, the value of this enum is a 3.)
            </summary>
        </member>
        <member name="T:Ionic.Zip.EncryptionAlgorithm">
             <summary>
             An enum that provides the various encryption algorithms supported by this
             library.
             </summary>
            
             <remarks>
            
             <para>
               <c>PkzipWeak</c> implies the use of Zip 2.0 encryption, which is known to be
               weak and subvertible.
             </para>
            
             <para>
               A note on interoperability: Values of <c>PkzipWeak</c> and <c>None</c> are
               specified in <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's zip
               specification</see>, and are considered to be "standard".  Zip archives
               produced using these options will be interoperable with many other zip tools
               and libraries, including Windows Explorer.
             </para>
            
             <para>
               Values of <c>WinZipAes128</c> and <c>WinZipAes256</c> are not part of the Zip
               specification, but rather imply the use of a vendor-specific extension from
               WinZip. If you want to produce interoperable Zip archives, do not use these
               values.  For example, if you produce a zip archive using WinZipAes256, you
               will be able to open it in Windows Explorer on Windows XP and Vista, but you
               will not be able to extract entries; trying this will lead to an "unspecified
               error". For this reason, some people have said that a zip archive that uses
               WinZip's AES encryption is not actually a zip archive at all.  A zip archive
               produced this way will be readable with the WinZip tool (Version 11 and
               beyond).
             </para>
            
             <para>
               There are other third-party tools and libraries, both commercial and
               otherwise, that support WinZip's AES encryption. These will be able to read
               AES-encrypted zip archives produced by DotNetZip, and conversely applications
               that use DotNetZip to read zip archives will be able to read AES-encrypted
               archives produced by those tools or libraries.  Consult the documentation for
               those other tools and libraries to find out if WinZip's AES encryption is
               supported.
             </para>
            
             <para>
               In case you care: According to <see href="http://www.winzip.com/aes_info.htm">the WinZip specification</see>, the
               actual AES key used is derived from the <see cref="P:Ionic.Zip.ZipEntry.Password"/> via an
               algorithm that complies with <see href="http://www.ietf.org/rfc/rfc2898.txt">RFC 2898</see>, using an iteration
               count of 1000.  The algorithm is sometimes referred to as PBKDF2, which stands
               for "Password Based Key Derivation Function #2".
             </para>
            
             <para>
               A word about password strength and length: The AES encryption technology is
               very good, but any system is only as secure as the weakest link.  If you want
               to secure your data, be sure to use a password that is hard to guess.  To make
               it harder to guess (increase its "entropy"), you should make it longer.  If
               you use normal characters from an ASCII keyboard, a password of length 20 will
               be strong enough that it will be impossible to guess.  For more information on
               that, I'd encourage you to read <see href="http://www.redkestrel.co.uk/Articles/RandomPasswordStrength.html">this
               article.</see>
             </para>
            
             <para>
               The WinZip AES algorithms are not supported with the version of DotNetZip that
               runs on the .NET Compact Framework.  This is because .NET CF lacks the
               HMACSHA1 class that is required for producing the archive.
             </para>
             </remarks>
        </member>
        <member name="F:Ionic.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption at all.
            </summary>
        </member>
        <member name="F:Ionic.Zip.EncryptionAlgorithm.PkzipWeak">
            <summary>
            Traditional or Classic pkzip encryption.
            </summary>
        </member>
        <member name="F:Ionic.Zip.EncryptionAlgorithm.WinZipAes128">
            <summary>
            WinZip AES encryption (128 key bits).
            </summary>
        </member>
        <member name="F:Ionic.Zip.EncryptionAlgorithm.WinZipAes256">
            <summary>
            WinZip AES encryption (256 key bits).
            </summary>
        </member>
        <member name="F:Ionic.Zip.EncryptionAlgorithm.Unsupported">
            <summary>
            An encryption algorithm that is not supported by DotNetZip.
            </summary>
        </member>
        <member name="T:Ionic.Zip.ExtractExistingFileAction">
             <summary>
             An enum for the options when extracting an entry would overwrite an existing file. 
             </summary>
             
             <remarks>
               <para>
                 This enum describes the actions that the library can take when an
                 <c>Extract()</c> or <c>ExtractWithPassword()</c> method is called to extract an
                 entry to a filesystem, and the extraction would overwrite an existing filesystem
                 file.
               </para>
             </remarks>
            
        </member>
        <member name="F:Ionic.Zip.ExtractExistingFileAction.Throw">
            <summary>
            Throw an exception when extraction would overwrite an existing file. (For
            COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:Ionic.Zip.ExtractExistingFileAction.OverwriteSilently">
            <summary>
            When extraction would overwrite an existing file, overwrite the file silently.
            The overwrite will happen even if the target file is marked as read-only.
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:Ionic.Zip.ExtractExistingFileAction.DoNotOverwrite">
            <summary>
            When extraction would overwrite an existing file, don't overwrite the file, silently. 
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="F:Ionic.Zip.ExtractExistingFileAction.InvokeExtractProgressEvent">
            <summary>
            When extraction would overwrite an existing file, invoke the ExtractProgress
            event, using an event type of <see cref="F:Ionic.Zip.ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite"/>.  In
            this way, the application can decide, just-in-time, whether to overwrite the
            file. For example, a GUI application may wish to pop up a dialog to allow
            the user to choose. You may want to examine the <see cref="P:Ionic.Zip.ExtractProgressEventArgs.ExtractLocation"/> property before making
            the decision. If, after your processing in the Extract progress event, you
            want to NOT extract the file, set <see cref="P:Ionic.Zip.ZipEntry.ExtractExistingFile"/>
            on the <c>ZipProgressEventArgs.CurrentEntry</c> to <c>DoNotOverwrite</c>.
            If you do want to extract the file, set <c>ZipEntry.ExtractExistingFile</c>
            to <c>OverwriteSilently</c>.  If you want to cancel the Extraction, set
            <c>ZipProgressEventArgs.Cancel</c> to true.  Cancelling differs from using
            DoNotOverwrite in that a cancel will not extract any further entries, if
            there are any.  (For COM clients, the value of this enum is a 3.)
            </summary>
        </member>
        <member name="T:Ionic.LogicalConjunction">
            <summary>
            Enumerates the options for a logical conjunction. This enum is intended for use
            internally by the FileSelector class.
            </summary>
        </member>
        <member name="T:Ionic.FileSelector">
             <summary>
               FileSelector encapsulates logic that selects files from a source - a zip file
               or the filesystem - based on a set of criteria.  This class is used internally
               by the DotNetZip library, in particular for the AddSelectedFiles() methods.
               This class can also be used independently of the zip capability in DotNetZip.
             </summary>
            
             <remarks>
            
             <para>
               The FileSelector class is used internally by the ZipFile class for selecting
               files for inclusion into the ZipFile, when the <see cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)"/> method, or one of
               its overloads, is called.  It's also used for the <see cref="M:Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String)"/> methods.  Typically, an
               application that creates or manipulates Zip archives will not directly
               interact with the FileSelector class.
             </para>
            
             <para>
               Some applications may wish to use the FileSelector class directly, to
               select files from disk volumes based on a set of criteria, without creating or
               querying Zip archives.  The file selection criteria include: a pattern to
               match the filename; the last modified, created, or last accessed time of the
               file; the size of the file; and the attributes of the file.
             </para>
            
             <para>
               Consult the documentation for <see cref="P:Ionic.FileSelector.SelectionCriteria"/>
               for more information on specifying the selection criteria.
             </para>
            
             </remarks>
        </member>
        <member name="M:Ionic.FileSelector.#ctor(System.String)">
             <summary>
               Constructor that allows the caller to specify file selection criteria.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the caller to specify a set of criteria for
               selection of files.
             </para>
            
             <para>
               See <see cref="P:Ionic.FileSelector.SelectionCriteria"/> for a description of
               the syntax of the selectionCriteria string.
             </para>
            
             <para>
               By default the FileSelector will traverse NTFS Reparse Points.  To
               change this, use <see cref="M:Ionic.FileSelector.#ctor(System.String,System.Boolean)">FileSelector(String, bool)</see>.
             </para>
             </remarks>
            
             <param name="selectionCriteria">The criteria for file selection.</param>
        </member>
        <member name="M:Ionic.FileSelector.#ctor(System.String,System.Boolean)">
             <summary>
               Constructor that allows the caller to specify file selection criteria.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the caller to specify a set of criteria for
               selection of files.
             </para>
            
             <para>
               See <see cref="P:Ionic.FileSelector.SelectionCriteria"/> for a description of
               the syntax of the selectionCriteria string.
             </para>
             </remarks>
            
             <param name="selectionCriteria">The criteria for file selection.</param>
             <param name="traverseDirectoryReparsePoints">
             whether to traverse NTFS reparse points (junctions).
             </param>
        </member>
        <member name="M:Ionic.FileSelector.ToString">
            <summary>
            Returns a string representation of the FileSelector object.
            </summary>
            <returns>The string representation of the boolean logic statement of the file
            selection criteria for this instance. </returns>
        </member>
        <member name="M:Ionic.FileSelector.SelectFiles(System.String)">
             <summary>
               Returns the names of the files in the specified directory
               that fit the selection criteria specified in the FileSelector.
             </summary>
            
             <remarks>
               This is equivalent to calling <see cref="M:Ionic.FileSelector.SelectFiles(System.String,System.Boolean)"/>
               with recurseDirectories = false.
             </remarks>
            
             <param name="directory">
               The name of the directory over which to apply the FileSelector
               criteria.
             </param>
            
             <returns>
               A collection of strings containing fully-qualified pathnames of files
               that match the criteria specified in the FileSelector instance.
             </returns>
        </member>
        <member name="M:Ionic.FileSelector.SelectFiles(System.String,System.Boolean)">
             <summary>
               Returns the names of the files in the specified directory that fit the
               selection criteria specified in the FileSelector, optionally recursing
               through subdirectories.
             </summary>
            
             <remarks>
               This method applies the file selection criteria contained in the
               FileSelector to the files contained in the given directory, and
               returns the names of files that conform to the criteria.
             </remarks>
            
             <param name="directory">
               The name of the directory over which to apply the FileSelector
               criteria.
             </param>
            
             <param name="recurseDirectories">
               Whether to recurse through subdirectories when applying the file
               selection criteria.
             </param>
            
             <returns>
               A collection of strings containing fully-qualified pathnames of files
               that match the criteria specified in the FileSelector instance.
             </returns>
        </member>
        <member name="M:Ionic.FileSelector.SelectEntries(Ionic.Zip.ZipFile)">
             <summary>
             Retrieve the ZipEntry items in the ZipFile that conform to the specified criteria.
             </summary>
             <remarks>
            
             <para>
             This method applies the criteria set in the FileSelector instance (as described in
             the <see cref="P:Ionic.FileSelector.SelectionCriteria"/>) to the specified ZipFile.  Using this
             method, for example, you can retrieve all entries from the given ZipFile that
             have filenames ending in .txt.
             </para>
            
             <para>
             Normally, applications would not call this method directly.  This method is used
             by the ZipFile class.
             </para>
            
             <para>
             Using the appropriate SelectionCriteria, you can retrieve entries based on size,
             time, and attributes. See <see cref="P:Ionic.FileSelector.SelectionCriteria"/> for a
             description of the syntax of the SelectionCriteria string.
             </para>
            
             </remarks>
            
             <param name="zip">The ZipFile from which to retrieve entries.</param>
            
             <returns>a collection of ZipEntry objects that conform to the criteria.</returns>
        </member>
        <member name="M:Ionic.FileSelector.SelectEntries(Ionic.Zip.ZipFile,System.String)">
             <summary>
             Retrieve the ZipEntry items in the ZipFile that conform to the specified criteria.
             </summary>
             <remarks>
            
             <para>
             This method applies the criteria set in the FileSelector instance (as described in
             the <see cref="P:Ionic.FileSelector.SelectionCriteria"/>) to the specified ZipFile.  Using this
             method, for example, you can retrieve all entries from the given ZipFile that
             have filenames ending in .txt.
             </para>
            
             <para>
             Normally, applications would not call this method directly.  This method is used
             by the ZipFile class.
             </para>
            
             <para>
             This overload allows the selection of ZipEntry instances from the ZipFile to be restricted
             to entries contained within a particular directory in the ZipFile.
             </para>
            
             <para>
             Using the appropriate SelectionCriteria, you can retrieve entries based on size,
             time, and attributes. See <see cref="P:Ionic.FileSelector.SelectionCriteria"/> for a
             description of the syntax of the SelectionCriteria string.
             </para>
            
             </remarks>
            
             <param name="zip">The ZipFile from which to retrieve entries.</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <returns>a collection of ZipEntry objects that conform to the criteria.</returns>
        </member>
        <member name="P:Ionic.FileSelector.SelectionCriteria">
             <summary>
               The string specifying which files to include when retrieving.
             </summary>
             <remarks>
            
             <para>
               Specify the criteria in statements of 3 elements: a noun, an operator,
               and a value.  Consider the string "name != *.doc" .  The noun is
               "name".  The operator is "!=", implying "Not Equal".  The value is
               "*.doc".  That criterion, in English, says "all files with a name that
               does not end in the .doc extension."
             </para>
            
             <para>
               Supported nouns include "name" (or "filename") for the filename;
               "atime", "mtime", and "ctime" for last access time, last modfied time,
               and created time of the file, respectively; "attributes" (or "attrs")
               for the file attributes; "size" (or "length") for the file length
               (uncompressed); and "type" for the type of object, either a file or a
               directory.  The "attributes", "type", and "name" nouns all support =
               and != as operators.  The "size", "atime", "mtime", and "ctime" nouns
               support = and !=, and &gt;, &gt;=, &lt;, &lt;= as well.  The times are
               taken to be expressed in local time.
             </para>
            
             <para>
               Specify values for the file attributes as a string with one or more of
               the characters H,R,S,A,I,L in any order, implying file attributes of
               Hidden, ReadOnly, System, Archive, NotContextIndexed, and ReparsePoint
               (symbolic link) respectively.
             </para>
            
             <para>
               To specify a time, use YYYY-MM-DD-HH:mm:ss or YYYY/MM/DD-HH:mm:ss as
               the format.  If you omit the HH:mm:ss portion, it is assumed to be
               00:00:00 (midnight).
             </para>
            
             <para>
               The value for a size criterion is expressed in integer quantities of
               bytes, kilobytes (use k or kb after the number), megabytes (m or mb),
               or gigabytes (g or gb).
             </para>
            
             <para>
               The value for a name is a pattern to match against the filename,
               potentially including wildcards.  The pattern follows CMD.exe glob
               rules: * implies one or more of any character, while ?  implies one
               character.  If the name pattern contains any slashes, it is matched to
               the entire filename, including the path; otherwise, it is matched
               against only the filename without the path.  This means a pattern of
               "*\*.*" matches all files one directory level deep, while a pattern of
               "*.*" matches all files in all directories.
             </para>
            
             <para>
               To specify a name pattern that includes spaces, use single quotes
               around the pattern.  A pattern of "'* *.*'" will match all files that
               have spaces in the filename.  The full criteria string for that would
               be "name = '* *.*'" .
             </para>
            
             <para>
               The value for a type criterion is either F (implying a file) or D
               (implying a directory).
             </para>
            
             <para>
               Some examples:
             </para>
            
             <list type="table">
               <listheader>
                 <term>criteria</term>
                 <description>Files retrieved</description>
               </listheader>
            
               <item>
                 <term>name != *.xls </term>
                 <description>any file with an extension that is not .xls
                 </description>
               </item>
            
               <item>
                 <term>name = *.mp3 </term>
                 <description>any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>*.mp3</term>
                 <description>(same as above) any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>attributes = A </term>
                 <description>all files whose attributes include the Archive bit.
                 </description>
               </item>
            
               <item>
                 <term>attributes != H </term>
                 <description>all files whose attributes do not include the Hidden bit.
                 </description>
               </item>
            
               <item>
                 <term>mtime &gt; 2009-01-01</term>
                 <description>all files with a last modified time after January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>ctime &gt; 2009/01/01-03:00:00</term>
                 <description>all files with a created time after 3am (local time),
                 on January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>size &gt; 2gb</term>
                 <description>all files whose uncompressed size is greater than 2gb.
                 </description>
               </item>
            
               <item>
                 <term>type = D</term>
                 <description>all directories in the filesystem. </description>
               </item>
            
             </list>
            
             <para>
               You can combine criteria with the conjunctions AND, OR, and XOR. Using
               a string like "name = *.txt AND size &gt;= 100k" for the
               selectionCriteria retrieves entries whose names end in .txt, and whose
               uncompressed size is greater than or equal to 100 kilobytes.
             </para>
            
             <para>
               For more complex combinations of criteria, you can use parenthesis to
               group clauses in the boolean logic.  Absent parenthesis, the
               precedence of the criterion atoms is determined by order of
               appearance.  Unlike the C# language, the AND conjunction does not take
               precendence over the logical OR.  This is important only in strings
               that contain 3 or more criterion atoms.  In other words, "name = *.txt
               and size &gt; 1000 or attributes = H" implies "((name = *.txt AND size
               &gt; 1000) OR attributes = H)" while "attributes = H OR name = *.txt
               and size &gt; 1000" evaluates to "((attributes = H OR name = *.txt)
               AND size &gt; 1000)".  When in doubt, use parenthesis.
             </para>
            
             <para>
               Using time properties requires some extra care. If you want to
               retrieve all entries that were last updated on 2009 February 14,
               specify "mtime &gt;= 2009-02-14 AND mtime &lt; 2009-02-15".  Read this
               to say: all files updated after 12:00am on February 14th, until
               12:00am on February 15th.  You can use the same bracketing approach to
               specify any time period - a year, a month, a week, and so on.
             </para>
            
             <para>
               The syntax allows one special case: if you provide a string with no
               spaces, it is treated as a pattern to match for the filename.
               Therefore a string like "*.xls" will be equivalent to specifying "name
               = *.xls".  This "shorthand" notation does not work with compound
               criteria.
             </para>
            
             <para>
               There is no logic in this class that insures that the inclusion
               criteria are internally consistent.  For example, it's possible to
               specify criteria that says the file must have a size of less than 100
               bytes, as well as a size that is greater than 1000 bytes.  Obviously
               no file will ever satisfy such criteria, but this class does not check
               for or detect such inconsistencies.
             </para>
            
             </remarks>
            
             <exception cref="T:System.Exception">
               Thrown in the setter if the value has an invalid syntax.
             </exception>
        </member>
        <member name="P:Ionic.FileSelector.TraverseReparsePoints">
            <summary>
             Indicates whether searches will traverse NTFS reparse points, like Junctions.
            </summary>
        </member>
        <member name="T:Ionic.EnumUtil">
            <summary>
            Summary description for EnumUtil.
            </summary>
        </member>
        <member name="M:Ionic.EnumUtil.GetDescription(System.Enum)">
            <summary>
              Returns the value of the DescriptionAttribute if the specified Enum
              value has one.  If not, returns the ToString() representation of the
              Enum value.
            </summary>
            <param name="value">The Enum to get the description for</param>
            <returns></returns>
        </member>
        <member name="M:Ionic.EnumUtil.Parse(System.Type,System.String)">
            <summary>
              Converts the string representation of the name or numeric value of one
              or more enumerated constants to an equivalent enumerated object.
              Note: use the DescriptionAttribute on enum values to enable this.
            </summary>
            <param name="enumType">The System.Type of the enumeration.</param>
            <param name="stringRepresentation">
              A string containing the name or value to convert.
            </param>
            <returns></returns>
        </member>
        <member name="M:Ionic.EnumUtil.Parse(System.Type,System.String,System.Boolean)">
            <summary>
              Converts the string representation of the name or numeric value of one
              or more enumerated constants to an equivalent enumerated object.  A
              parameter specified whether the operation is case-sensitive.  Note:
              use the DescriptionAttribute on enum values to enable this.
            </summary>
            <param name="enumType">The System.Type of the enumeration.</param>
            <param name="stringRepresentation">
              A string containing the name or value to convert.
            </param>
            <param name="ignoreCase">
              Whether the operation is case-sensitive or not.</param>
            <returns></returns>
        </member>
        <member name="T:Ionic.Zip.WinZipAesCrypto">
             <summary>
               This is a helper class supporting WinZip AES encryption.
               This class is intended for use only by the DotNetZip library.
             </summary>
            
             <remarks>
               Most uses of the DotNetZip library will not involve direct calls into
               the WinZipAesCrypto class.  Instead, the WinZipAesCrypto class is
               instantiated and used by the ZipEntry() class when WinZip AES
               encryption or decryption on an entry is employed.
             </remarks>
        </member>
        <member name="T:Ionic.Zip.WinZipAesCipherStream">
             <summary>
               A stream that encrypts as it writes, or decrypts as it reads.  The
               Crypto is AES in CTR (counter) mode, which is compatible with the AES
               encryption employed by WinZip 12.0.
             </summary>
             <remarks>
               <para>
                 The AES/CTR encryption protocol used by WinZip works like this:
            
                   - start with a counter, initialized to zero.
            
                   - to encrypt, take the data by 16-byte blocks. For each block:
                     - apply the transform to the counter
                     - increement the counter
                     - XOR the result of the transform with the plaintext to
                       get the ciphertext.
                     - compute the mac on the encrypted bytes
                   - when finished with all blocks, store the computed MAC.
            
                   - to decrypt, take the data by 16-byte blocks. For each block:
                     - compute the mac on the encrypted bytes,
                     - apply the transform to the counter
                     - increement the counter
                     - XOR the result of the transform with the ciphertext to
                       get the plaintext.
                   - when finished with all blocks, compare the computed MAC against
                     the stored MAC
            
               </para>
             </remarks>
        </member>
        <member name="M:Ionic.Zip.WinZipAesCipherStream.#ctor(System.IO.Stream,Ionic.Zip.WinZipAesCrypto,System.Int64,Ionic.Zip.CryptoMode)">
            <summary>
            The constructor.
            </summary>
            <param name="s">The underlying stream</param>
            <param name="mode">To either encrypt or decrypt.</param>
            <param name="cryptoParams">The pre-initialized WinZipAesCrypto object.</param>
            <param name="length">The maximum number of bytes to read from the stream.</param>
        </member>
        <member name="M:Ionic.Zip.WinZipAesCipherStream.Close">
            <summary>
              Close the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zip.WinZipAesCipherStream.Flush">
            <summary>
            Flush the content in the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zip.WinZipAesCipherStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Ionic.Zip.WinZipAesCipherStream.SetLength(System.Int64)">
            <summary>
            This method throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:Ionic.Zip.WinZipAesCipherStream.FinalAuthentication">
            <summary>
            Returns the final HMAC-SHA1-80 for the data that was encrypted.
            </summary>
        </member>
        <member name="P:Ionic.Zip.WinZipAesCipherStream.CanRead">
            <summary>
            Returns true if the stream can be read.
            </summary>
        </member>
        <member name="P:Ionic.Zip.WinZipAesCipherStream.CanSeek">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:Ionic.Zip.WinZipAesCipherStream.CanWrite">
            <summary>
            Returns true if the CryptoMode is Encrypt.
            </summary>
        </member>
        <member name="P:Ionic.Zip.WinZipAesCipherStream.Length">
            <summary>
            Getting this property throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:Ionic.Zip.WinZipAesCipherStream.Position">
            <summary>
            Getting or Setting this property throws a NotImplementedException.
            </summary>
        </member>
        <member name="T:Ionic.Zip.BadPasswordException">
            <summary>
            Issued when an <c>ZipEntry.ExtractWithPassword()</c> method is invoked
            with an incorrect password.
            </summary>
        </member>
        <member name="T:Ionic.Zip.ZipException">
            <summary>
            Base class for all exceptions defined by and throw by the Zip library.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Ionic.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="M:Ionic.Zip.BadPasswordException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadPasswordException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.Zip.BadReadException">
            <summary>
            Indicates that a read was attempted on a stream, and bad or incomplete data was
            received.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadReadException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadReadException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadReadException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.Zip.BadCrcException">
            <summary>
            Issued when an CRC check fails upon extracting an entry from a zip archive.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadCrcException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadCrcException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadCrcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.Zip.SfxGenerationException">
            <summary>
            Issued when errors occur saving a self-extracting archive.
            </summary>
        </member>
        <member name="M:Ionic.Zip.SfxGenerationException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.SfxGenerationException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.SfxGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.Zip.BadStateException">
            <summary>
            Indicates that an operation was attempted on a ZipFile which was not possible
            given the state of the instance. For example, if you call <c>Save()</c> on a ZipFile
            which has no filename set, you can get this exception.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadStateException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Ionic.Zip.BadStateException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadStateException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Ionic.Zip.BadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Ionic.Zip.SharedUtilities">
            <summary>
            Collects general purpose utility methods.
            </summary>
        </member>
        <member name="M:Ionic.Zip.SharedUtilities.GetFileLength(System.String)">
            private null constructor
        </member>
        <member name="M:Ionic.Zip.SharedUtilities.NormalizePathForUseInZipFile(System.String)">
            <summary>
            Utility routine for transforming path names from filesystem format (on Windows that means backslashes) to
            a format suitable for use within zipfiles. This means trimming the volume letter and colon (if any) And
            swapping backslashes for forward slashes.
            </summary>
            <param name="pathName">source path.</param>
            <returns>transformed path</returns>
        </member>
        <member name="M:Ionic.Zip.SharedUtilities.FindSignature(System.IO.Stream,System.Int32)">
             <summary>
               Finds a signature in the zip stream. This is useful for finding
               the end of a zip entry, for example, or the beginning of the next ZipEntry.
             </summary>
            
             <remarks>
               <para>
                 Scans through 64k at a time.
               </para>
            
               <para>
                 If the method fails to find the requested signature, the stream Position
                 after completion of this method is unchanged. If the method succeeds in
                 finding the requested signature, the stream position after completion is
                 direct AFTER the signature found in the stream.
               </para>
             </remarks>
            
             <param name="stream">The stream to search</param>
             <param name="SignatureToFind">The 4-byte signature to find</param>
             <returns>The number of bytes read</returns>
        </member>
        <member name="M:Ionic.Zip.SharedUtilities.CreateAndOpenUniqueTempFile(System.String,System.IO.Stream@,System.String@)">
            <summary>
              Create a pseudo-random filename, suitable for use as a temporary
              file, and open it.
            </summary>
            <remarks>
            <para>
              The System.IO.Path.GetRandomFileName() method is not available on
              the Compact Framework, so this library provides its own substitute
              on NETCF.
            </para>
            <para>
              This method produces a filename of the form
              DotNetZip-xxxxxxxx.tmp, where xxxxxxxx is replaced by randomly
              chosen characters, and creates that file.
            </para>
            </remarks>
        </member>
        <member name="M:Ionic.Zip.SharedUtilities.ReadWithRetry(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Workitem 7889: handle ERROR_LOCK_VIOLATION during read
            </summary>
            <remarks>
            This could be gracefully handled with an extension attribute, but
            This assembly is built for .NET 2.0, so I cannot use them.
            </remarks>
        </member>
        <member name="T:Ionic.Zip.CountingStream">
            <summary>
              A decorator stream. It wraps another stream, and performs bookkeeping
              to keep track of the stream Position.
            </summary>
            <remarks>
              <para>
                In some cases, it is not possible to get the Position of a stream, let's
                say, on a write-only output stream like ASP.NET's
                <c>Response.OutputStream</c>, or on a different write-only stream
                provided as the destination for the zip by the application.  In this
                case, programmers can use this counting stream to count the bytes read
                or written.
              </para>
              <para>
                Consider the scenario of an application that saves a self-extracting
                archive (SFX), that uses a custom SFX stub.
              </para>
              <para>
                Saving to a filesystem file, the application would open the
                filesystem file (getting a <c>FileStream</c>), save the custom sfx stub
                into it, and then call <c>ZipFile.Save()</c>, specifying the same
                FileStream. <c>ZipFile.Save()</c> does the right thing for the zipentry
                offsets, by inquiring the Position of the <c>FileStream</c> before writing
                any data, and then adding that initial offset into any ZipEntry
                offsets in the zip directory. Everything works fine.
              </para>
              <para>
                Now suppose the application is an ASPNET application and it saves
                directly to <c>Response.OutputStream</c>. It's not possible for DotNetZip to
                inquire the <c>Position</c>, so the offsets for the SFX will be wrong.
              </para>
              <para>
                The workaround is for the application to use this class to wrap
                <c>HttpResponse.OutputStream</c>, then write the SFX stub and the ZipFile
                into that wrapper stream. Because <c>ZipFile.Save()</c> can inquire the
                <c>Position</c>, it will then do the right thing with the offsets.
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Zip.CountingStream.#ctor(System.IO.Stream)">
            <summary>
            The constructor.
            </summary>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Ionic.Zip.CountingStream.Adjust(System.Int64)">
             <summary>
                Adjust the byte count on the stream.
             </summary>
            
             <param name='delta'>
               the number of bytes to subtract from the count.
             </param>
            
             <remarks>
               <para>
                 Subtract delta from the count of bytes written to the stream.
                 This is necessary when seeking back, and writing additional data,
                 as happens in some cases when saving Zip files.
               </para>
             </remarks>
        </member>
        <member name="M:Ionic.Zip.CountingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The read method.
            </summary>
            <param name="buffer">The buffer to hold the data read from the stream.</param>
            <param name="offset">the offset within the buffer to copy the first byte read.</param>
            <param name="count">the number of bytes to read.</param>
            <returns>the number of bytes read, after decryption and decompression.</returns>
        </member>
        <member name="M:Ionic.Zip.CountingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Write data into the stream.
            </summary>
            <param name="buffer">The buffer holding data to write to the stream.</param>
            <param name="offset">the offset within that data array to find the first byte to write.</param>
            <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zip.CountingStream.Flush">
            <summary>
              Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Ionic.Zip.CountingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Seek in the stream.
            </summary>
            <param name="offset">the offset point to seek to</param>
            <param name="origin">the reference point from which to seek</param>
            <returns>The new position</returns>
        </member>
        <member name="M:Ionic.Zip.CountingStream.SetLength(System.Int64)">
             <summary>
               Set the length of the underlying stream.  Be careful with this!
             </summary>
            
             <param name='value'>the length to set on the underlying stream.</param>
        </member>
        <member name="P:Ionic.Zip.CountingStream.WrappedStream">
            <summary>
              Gets the wrapped stream.
            </summary>
        </member>
        <member name="P:Ionic.Zip.CountingStream.BytesWritten">
            <summary>
              The count of bytes written out to the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zip.CountingStream.BytesRead">
            <summary>
              the count of bytes that have been read from the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zip.CountingStream.CanRead">
            <summary>
              Whether the stream can be read.
            </summary>
        </member>
        <member name="P:Ionic.Zip.CountingStream.CanSeek">
            <summary>
              Whether it is possible to call Seek() on the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zip.CountingStream.CanWrite">
            <summary>
              Whether it is possible to call Write() on the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zip.CountingStream.Length">
            <summary>
              The length of the underlying stream.
            </summary>
        </member>
        <member name="P:Ionic.Zip.CountingStream.ComputedPosition">
            <summary>
              Returns the sum of number of bytes written, plus the initial
              offset before writing.
            </summary>
        </member>
        <member name="P:Ionic.Zip.CountingStream.Position">
            <summary>
              The Position of the stream.
            </summary>
        </member>
        <member name="T:Ionic.Zip.ZipCrypto">
             <summary>
               This class implements the "traditional" or "classic" PKZip encryption,
               which today is considered to be weak. On the other hand it is
               ubiquitous. This class is intended for use only by the DotNetZip
               library.
             </summary>
            
             <remarks>
               Most uses of the DotNetZip library will not involve direct calls into
               the ZipCrypto class.  Instead, the ZipCrypto class is instantiated and
               used by the ZipEntry() class when encryption or decryption on an entry
               is employed.  If for some reason you really wanted to use a weak
               encryption algorithm in some other application, you might use this
               library.  But you would be much better off using one of the built-in
               strong encryption libraries in the .NET Framework, like the AES
               algorithm or SHA.
             </remarks>
        </member>
        <member name="M:Ionic.Zip.ZipCrypto.#ctor">
             <summary>
               The default constructor for ZipCrypto.
             </summary>
            
             <remarks>
               This class is intended for internal use by the library only. It's
               probably not useful to you. Seriously.  Stop reading this
               documentation.  It's a waste of your time.  Go do something else.
               Check the football scores. Go get an ice cream with a friend.
               Seriously.
             </remarks>
            
        </member>
        <member name="M:Ionic.Zip.ZipCrypto.DecryptMessage(System.Byte[],System.Int32)">
             <summary>
               Call this method on a cipher text to render the plaintext. You must
               first initialize the cipher with a call to InitCipher.
             </summary>
            
             <example>
               <code>
                 var cipher = new ZipCrypto();
                 cipher.InitCipher(Password);
                 // Decrypt the header.  This has a side effect of "further initializing the
                 // encryption keys" in the traditional zip encryption.
                 byte[] DecryptedMessage = cipher.DecryptMessage(EncryptedMessage);
               </code>
             </example>
            
             <param name="cipherText">The encrypted buffer.</param>
             <param name="length">
               The number of bytes to encrypt.
               Should be less than or equal to CipherText.Length.
             </param>
            
             <returns>The plaintext.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipCrypto.EncryptMessage(System.Byte[],System.Int32)">
             <summary>
               This is the converse of DecryptMessage.  It encrypts the plaintext
               and produces a ciphertext.
             </summary>
            
             <param name="plainText">The plain text buffer.</param>
            
             <param name="length">
               The number of bytes to encrypt.
               Should be less than or equal to plainText.Length.
             </param>
            
             <returns>The ciphertext.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipCrypto.InitCipher(System.String)">
             <summary>
               This initializes the cipher with the given password.
               See AppNote.txt for details.
             </summary>
            
             <param name="passphrase">
               The passphrase for encrypting or decrypting with this cipher.
             </param>
            
             <remarks>
             <code>
             Step 1 - Initializing the encryption keys
             -----------------------------------------
             Start with these keys:
             Key(0) := 305419896 (0x12345678)
             Key(1) := 591751049 (0x23456789)
             Key(2) := 878082192 (0x34567890)
            
             Then, initialize the keys with a password:
            
             loop for i from 0 to length(password)-1
                 update_keys(password(i))
             end loop
            
             Where update_keys() is defined as:
            
             update_keys(char):
               Key(0) := crc32(key(0),char)
               Key(1) := Key(1) + (Key(0) bitwiseAND 000000ffH)
               Key(1) := Key(1) * 134775813 + 1
               Key(2) := crc32(key(2),key(1) rightshift 24)
             end update_keys
            
             Where crc32(old_crc,char) is a routine that given a CRC value and a
             character, returns an updated CRC value after applying the CRC-32
             algorithm described elsewhere in this document.
            
             </code>
            
             <para>
               After the keys are initialized, then you can use the cipher to
               encrypt the plaintext.
             </para>
            
             <para>
               Essentially we encrypt the password with the keys, then discard the
               ciphertext for the password. This initializes the keys for later use.
             </para>
            
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipCrypto.MagicByte">
            <summary>
            From AppNote.txt:
            unsigned char decrypt_byte()
                local unsigned short temp
                temp :=- Key(2) | 2
                decrypt_byte := (temp * (temp ^ 1)) bitshift-right 8
            end decrypt_byte
            </summary>
        </member>
        <member name="T:Ionic.Zip.ZipCipherStream">
            <summary>
              A Stream for reading and concurrently decrypting data from a zip file,
              or for writing and concurrently encrypting data to a zip file.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipCipherStream.#ctor(System.IO.Stream,Ionic.Zip.ZipCrypto,Ionic.Zip.CryptoMode)">
            <summary>  The constructor. </summary>
            <param name="s">The underlying stream</param>
            <param name="mode">To either encrypt or decrypt.</param>
            <param name="cipher">The pre-initialized ZipCrypto object.</param>
        </member>
        <member name="T:Ionic.Zip.WriteDelegate">
             <summary>
               Delegate in which the application writes the <c>ZipEntry</c> content for the named entry.
             </summary>
            
             <param name="entryName">The name of the entry that must be written.</param>
             <param name="stream">The stream to which the entry data should be written.</param>
            
             <remarks>
               When you add an entry and specify a <c>WriteDelegate</c>, via <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.WriteDelegate)"/>, the application
               code provides the logic that writes the entry data directly into the zip file.
             </remarks>
            
             <example>
            
             This example shows how to define a WriteDelegate that obtains a DataSet, and then
             writes the XML for the DataSet into the zip archive.  There's no need to
             save the XML to a disk file first.
            
             <code lang="C#">
             private void WriteEntry (String filename, Stream output)
             {
                 DataSet ds1 = ObtainDataSet();
                 ds1.WriteXml(output);
             }
            
             private void Run()
             {
                 using (var zip = new ZipFile())
                 {
                     zip.AddEntry(zipEntryName, WriteEntry);
                     zip.Save(zipFileName);
                 }
             }
             </code>
            
             <code lang="vb">
             Private Sub WriteEntry (ByVal filename As String, ByVal output As Stream)
                 DataSet ds1 = ObtainDataSet()
                 ds1.WriteXml(stream)
             End Sub
            
             Public Sub Run()
                 Using zip = New ZipFile
                     zip.AddEntry(zipEntryName, New WriteDelegate(AddressOf WriteEntry))
                     zip.Save(zipFileName)
                 End Using
             End Sub
             </code>
             </example>
             <seealso cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.WriteDelegate)"/>
        </member>
        <member name="T:Ionic.Zip.OpenDelegate">
             <summary>
               Delegate in which the application opens the stream, just-in-time, for the named entry.
             </summary>
            
             <param name="entryName">
             The name of the ZipEntry that the application should open the stream for.
             </param>
            
             <remarks>
               When you add an entry via <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.OpenDelegate,Ionic.Zip.CloseDelegate)"/>, the application code provides the logic that
               opens and closes the stream for the given ZipEntry.
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.OpenDelegate,Ionic.Zip.CloseDelegate)"/>
        </member>
        <member name="T:Ionic.Zip.CloseDelegate">
             <summary>
               Delegate in which the application closes the stream, just-in-time, for the named entry.
             </summary>
            
             <param name="entryName">
             The name of the ZipEntry that the application should close the stream for.
             </param>
            
             <param name="stream">The stream to be closed.</param>
            
             <remarks>
               When you add an entry via <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.OpenDelegate,Ionic.Zip.CloseDelegate)"/>, the application code provides the logic that
               opens and closes the stream for the given ZipEntry.
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.OpenDelegate,Ionic.Zip.CloseDelegate)"/>
        </member>
        <member name="T:Ionic.Zip.SetCompressionCallback">
             <summary>
               Delegate for the callback by which the application tells the
               library the CompressionLevel to use for a file.
             </summary>
            
             <remarks>
             <para>
               Using this callback, the application can, for example, specify that
               previously-compressed files (.mp3, .png, .docx, etc) should use a
               <c>CompressionLevel</c> of <c>None</c>, or can set the compression level based
               on any other factor.
             </para>
             </remarks>
             <seealso cref="P:Ionic.Zip.ZipFile.SetCompression"/>
        </member>
        <member name="T:Ionic.Zip.ZipProgressEventType">
            <summary>
              In an EventArgs type, indicates which sort of progress event is being
              reported.
            </summary>
            <remarks>
              There are events for reading, events for saving, and events for
              extracting. This enumeration allows a single EventArgs type to be sued to
              describe one of multiple subevents. For example, a SaveProgress event is
              invoked before, after, and during the saving of a single entry.  The value
              of an enum with this type, specifies which event is being triggered.  The
              same applies to Extraction, Reading and Adding events.
            </remarks>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Adding_Started">
            <summary>
            Indicates that a Add() operation has started.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Adding_AfterAddEntry">
            <summary>
            Indicates that an individual entry in the archive has been added.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Adding_Completed">
            <summary>
            Indicates that a Add() operation has completed.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Reading_Started">
            <summary>
            Indicates that a Read() operation has started.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Reading_BeforeReadEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be read.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Reading_AfterReadEntry">
            <summary>
            Indicates that an individual entry in the archive has just been read.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Reading_Completed">
            <summary>
            Indicates that a Read() operation has completed.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Reading_ArchiveBytesRead">
            <summary>
            The given event reports the number of bytes read so far
            during a Read() operation.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Saving_Started">
            <summary>
            Indicates that a Save() operation has started.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Saving_BeforeWriteEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be written.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Saving_AfterWriteEntry">
            <summary>
            Indicates that an individual entry in the archive has just been saved.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Saving_Completed">
            <summary>
            Indicates that a Save() operation has completed.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Saving_AfterSaveTempArchive">
            <summary>
            Indicates that the zip archive has been created in a
            temporary location during a Save() operation.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Saving_BeforeRenameTempArchive">
            <summary>
            Indicates that the temporary file is about to be renamed to the final archive
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Saving_AfterRenameTempArchive">
            <summary>
            Indicates that the temporary file is has just been renamed to the final archive
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Saving_AfterCompileSelfExtractor">
            <summary>
            Indicates that the self-extracting archive has been compiled
            during a Save() operation.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Saving_EntryBytesRead">
            <summary>
            The given event is reporting the number of source bytes that have run through the compressor so far
            during a Save() operation.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Extracting_BeforeExtractEntry">
            <summary>
            Indicates that an entry is about to be extracted.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Extracting_AfterExtractEntry">
            <summary>
            Indicates that an entry has just been extracted.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite">
            <summary>
              Indicates that extraction of an entry would overwrite an existing
              filesystem file. You must use
              <see cref="F:Ionic.Zip.ExtractExistingFileAction.InvokeExtractProgressEvent">
              ExtractExistingFileAction.InvokeExtractProgressEvent</see> in the call
              to <c>ZipEntry.Extract()</c> in order to receive this event.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Extracting_EntryBytesWritten">
            <summary>
              The given event is reporting the number of bytes written so far for
              the current entry during an Extract() operation.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Extracting_BeforeExtractAll">
            <summary>
            Indicates that an ExtractAll operation is about to begin.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Extracting_AfterExtractAll">
            <summary>
            Indicates that an ExtractAll operation has completed.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipProgressEventType.Error_Saving">
            <summary>
            Indicates that an error has occurred while saving a zip file.
            This generally means the file cannot be opened, because it has been
            removed, or because it is locked by another process.  It can also
            mean that the file cannot be Read, because of a range lock conflict.
            </summary>
        </member>
        <member name="T:Ionic.Zip.ZipProgressEventArgs">
            <summary>
            Provides information about the progress of a save, read, or extract operation.
            This is a base class; you will probably use one of the classes derived from this one.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipProgressEventArgs.EntriesTotal">
            <summary>
            The total number of entries to be saved or extracted.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipProgressEventArgs.CurrentEntry">
            <summary>
            The name of the last entry saved or extracted.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipProgressEventArgs.Cancel">
            <summary>
            In an event handler, set this to cancel the save or extract
            operation that is in progress.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipProgressEventArgs.EventType">
            <summary>
            The type of event being reported.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipProgressEventArgs.ArchiveName">
            <summary>
            Returns the archive name associated to this event.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipProgressEventArgs.BytesTransferred">
            <summary>
            The number of bytes read or written so far for this entry.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipProgressEventArgs.TotalBytesToTransfer">
            <summary>
            Total number of bytes that will be read or written for this entry.
            This number will be -1 if the value cannot be determined.
            </summary>
        </member>
        <member name="T:Ionic.Zip.ReadProgressEventArgs">
            <summary>
            Provides information about the progress of a Read operation.
            </summary>
        </member>
        <member name="T:Ionic.Zip.AddProgressEventArgs">
            <summary>
            Provides information about the progress of a Add operation.
            </summary>
        </member>
        <member name="T:Ionic.Zip.SaveProgressEventArgs">
            <summary>
            Provides information about the progress of a save operation.
            </summary>
        </member>
        <member name="M:Ionic.Zip.SaveProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,Ionic.Zip.ZipEntry)">
            <summary>
            Constructor for the SaveProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesSaved">Number of entries that have been saved.</param>
            <param name="entry">The entry involved in the event.</param>
        </member>
        <member name="P:Ionic.Zip.SaveProgressEventArgs.EntriesSaved">
            <summary>
            Number of entries saved so far.
            </summary>
        </member>
        <member name="T:Ionic.Zip.ExtractProgressEventArgs">
            <summary>
            Provides information about the progress of the extract operation.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ExtractProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,Ionic.Zip.ZipEntry,System.String)">
            <summary>
            Constructor for the ExtractProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesExtracted">Number of entries that have been extracted.</param>
            <param name="entry">The entry involved in the event.</param>
            <param name="extractLocation">The location to which entries are extracted.</param>
        </member>
        <member name="P:Ionic.Zip.ExtractProgressEventArgs.EntriesExtracted">
            <summary>
            Number of entries extracted so far.  This is set only if the
            EventType is Extracting_BeforeExtractEntry or Extracting_AfterExtractEntry, and
            the Extract() is occurring witin the scope of a call to ExtractAll().
            </summary>
        </member>
        <member name="P:Ionic.Zip.ExtractProgressEventArgs.ExtractLocation">
            <summary>
            Returns the extraction target location, a filesystem path.
            </summary>
        </member>
        <member name="T:Ionic.Zip.ZipErrorEventArgs">
            <summary>
            Provides information about the an error that occurred while zipping.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipErrorEventArgs.Exception">
            <summary>
            Returns the exception that occurred, if any.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipErrorEventArgs.FileName">
            <summary>
            Returns the name of the file that caused the exception, if any.
            </summary>
        </member>
        <member name="T:Ionic.Zip.ZipEntry">
            <summary>
            Represents a single entry in a ZipFile. Typically, applications get a ZipEntry
            by enumerating the entries within a ZipFile, or by adding an entry to a ZipFile.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.ReadDirEntry(Ionic.Zip.ZipFile,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
               Reads one entry from the zip directory structure in the zip file.
             </summary>
            
             <param name="zf">
               The zipfile for which a directory entry will be read.  From this param, the
               method gets the ReadStream and the expected text encoding
               (ProvisionalAlternateEncoding) which is used if the entry is not marked
               UTF-8.
             </param>
            
             <param name="previouslySeen">
               a list of previously seen entry names; used to prevent duplicates.
             </param>
            
             <returns>the entry read from the archive.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.IsNotValidZipDirEntrySig(System.Int32)">
            <summary>
            Returns true if the passed-in value is a valid signature for a ZipDirEntry.
            </summary>
            <param name="signature">the candidate 4-byte signature value.</param>
            <returns>true, if the signature is valid according to the PKWare spec.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Applications should never need to call this directly.  It is exposed to
            support COM Automation environments.
            </remarks>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)">
             <summary>
               Sets the NTFS Creation, Access, and Modified times for the given entry.
             </summary>
            
             <remarks>
             <para>
               When adding an entry from a file or directory, the Creation, Access, and
               Modified times for the given entry are automatically set from the
               filesystem values. When adding an entry from a stream or string, the
               values are implicitly set to DateTime.Now.  The application may wish to
               set these values to some arbitrary value, before saving the archive, and
               can do so using the various setters.  If you want to set all of the times,
               this method is more efficient.
             </para>
            
             <para>
               The values you set here will be retrievable with the <see cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>, <see cref="P:Ionic.Zip.ZipEntry.CreationTime"/> and <see cref="P:Ionic.Zip.ZipEntry.AccessedTime"/> properties.
             </para>
            
             <para>
               When this method is called, if both <see cref="P:Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> and <see cref="P:Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> are false, then the
               <c>EmitTimesInWindowsFormatWhenSaving</c> flag is automatically set.
             </para>
            
             <para>
               DateTime values provided here without a DateTimeKind are assumed to be Local Time.
             </para>
            
             </remarks>
             <param name="created">the creation time of the entry.</param>
             <param name="accessed">the last access time of the entry.</param>
             <param name="modified">the last modified time of the entry.</param>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.Extract">
             <summary>
               Extract the entry to the filesystem, starting at the current
               working directory.
             </summary>
            
             <overloads>
               This method has a bunch of overloads! One of them is sure to
               be the right one for you... If you don't like these, check
               out the <c>ExtractWithPassword()</c> methods.
             </overloads>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:Ionic.Zip.ZipEntry.Extract(Ionic.Zip.ExtractExistingFileAction)"/>
            
             <remarks>
            
             <para>
               This method extracts an entry from a zip file into the current
               working directory.  The path of the entry as extracted is the full
               path as specified in the zip archive, relative to the current
               working directory.  After the file is extracted successfully, the
               file attributes and timestamps are set.
             </para>
            
             <para>
               The action taken when extraction an entry would overwrite an
               existing file is determined by the <see cref="P:Ionic.Zip.ZipEntry.ExtractExistingFile"/> property.
             </para>
            
             <para>
               Within the call to <c>Extract()</c>, the content for the entry is
               written into a filesystem file, and then the last modified time of the
               file is set according to the <see cref="P:Ionic.Zip.ZipEntry.LastModified"/> property on
               the entry. See the remarks the <see cref="P:Ionic.Zip.ZipEntry.LastModified"/> property for
               some details about the last modified time.
             </para>
            
             </remarks>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.Extract(Ionic.Zip.ExtractExistingFileAction)">
             <summary>
               Extract the entry to a file in the filesystem, using the specified
               behavior when extraction would overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the file is set after
               extraction.
             </para>
             </remarks>
            
             <param name="extractExistingFile">
               The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.Extract(System.IO.Stream)">
             <summary>
               Extracts the entry to the specified stream.
             </summary>
            
             <remarks>
             <para>
               The caller can specify any write-able stream, for example a <see cref="T:System.IO.FileStream"/>, a <see cref="T:System.IO.MemoryStream"/>, or ASP.NET's
               <c>Response.OutputStream</c>.  The content will be decrypted and
               decompressed as necessary. If the entry is encrypted and no password
               is provided, this method will throw.
             </para>
             <para>
               The position on the stream is not reset by this method before it extracts.
               You may want to call stream.Seek() before calling ZipEntry.Extract().
             </para>
             </remarks>
            
             <param name="stream">
               the stream to which the entry should be extracted.
             </param>
            
        </member>
        <member name="M:Ionic.Zip.ZipEntry.Extract(System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory.
             </summary>
            
             <param name="baseDirectory">the pathname of the base directory</param>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:Ionic.Zip.ZipEntry.Extract(System.String,Ionic.Zip.ExtractExistingFileAction)"/>
            
             <example>
             This example extracts only the entries in a zip file that are .txt files,
             into a directory called "textfiles".
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                 {
                   zip[s1].Extract("textfiles");
                 }
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
            
             <remarks>
            
             <para>
               Using this method, existing entries in the filesystem will not be
               overwritten. If you would like to force the overwrite of existing
               files, see the <see cref="P:Ionic.Zip.ZipEntry.ExtractExistingFile"/> property, or call
               <see cref="M:Ionic.Zip.ZipEntry.Extract(System.String,Ionic.Zip.ExtractExistingFileAction)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.Extract(System.String,Ionic.Zip.ExtractExistingFileAction)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified behavior when extraction would
               overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <example>
             <code lang="C#">
             String sZipPath = "Airborne.zip";
             String sFilePath = "Readme.txt";
             String sRootFolder = "Digado";
             using (ZipFile zip = ZipFile.Read(sZipPath))
             {
               if (zip.EntryFileNames.Contains(sFilePath))
               {
                 // use the string indexer on the zip file
                 zip[sFileName].Extract(sRootFolder,
                                        ExtractExistingFileAction.OverwriteSilently);
               }
             }
             </code>
            
             <code lang="VB">
             Dim sZipPath as String = "Airborne.zip"
             Dim sFilePath As String = "Readme.txt"
             Dim sRootFolder As String = "Digado"
             Using zip As ZipFile = ZipFile.Read(sZipPath)
               If zip.EntryFileNames.Contains(sFilePath)
                 ' use the string indexer on the zip file
                 zip(sFilePath).Extract(sRootFolder, _
                                        ExtractExistingFileAction.OverwriteSilently)
               End If
             End Using
             </code>
             </example>
            
             <param name="baseDirectory">the pathname of the base directory</param>
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.ExtractWithPassword(System.String)">
             <summary>
               Extract the entry to the filesystem, using the current working directory
               and the specified password.
             </summary>
            
             <overloads>
               This method has a bunch of overloads! One of them is sure to be
               the right one for you...
             </overloads>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:Ionic.Zip.ZipEntry.ExtractWithPassword(Ionic.Zip.ExtractExistingFileAction,System.String)"/>
            
             <remarks>
            
             <para>
               Existing entries in the filesystem will not be overwritten. If you
               would like to force the overwrite of existing files, see the <see cref="P:Ionic.Zip.ZipEntry.ExtractExistingFile"/>property, or call
               <see cref="M:Ionic.Zip.ZipEntry.ExtractWithPassword(Ionic.Zip.ExtractExistingFileAction,System.String)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:Ionic.Zip.ZipEntry.LastModified"/> property for some
               details about how the "last modified" time of the created file is
               set.
             </para>
             </remarks>
            
             <example>
               In this example, entries that use encryption are extracted using a
               particular password.
             <code>
             using (var zip = ZipFile.Read(FilePath))
             {
                 foreach (ZipEntry e in zip)
                 {
                     if (e.UsesEncryption)
                         e.ExtractWithPassword("Secret!");
                     else
                         e.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(FilePath)
                 Dim e As ZipEntry
                 For Each e In zip
                     If (e.UsesEncryption)
                       e.ExtractWithPassword("Secret!")
                     Else
                       e.Extract
                     End If
                 Next
             End Using
             </code>
             </example>
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.ExtractWithPassword(System.String,System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified password.
             </summary>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:Ionic.Zip.ZipEntry.ExtractWithPassword(System.String,Ionic.Zip.ExtractExistingFileAction,System.String)"/>
            
             <remarks>
             <para>
               Existing entries in the filesystem will not be overwritten. If you
               would like to force the overwrite of existing files, see the <see cref="P:Ionic.Zip.ZipEntry.ExtractExistingFile"/>property, or call
               <see cref="M:Ionic.Zip.ZipEntry.ExtractWithPassword(Ionic.Zip.ExtractExistingFileAction,System.String)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <param name="baseDirectory">The pathname of the base directory.</param>
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.ExtractWithPassword(Ionic.Zip.ExtractExistingFileAction,System.String)">
             <summary>
               Extract the entry to a file in the filesystem, relative to the
               current directory, using the specified behavior when extraction
               would overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <param name="password">The Password to use for decrypting the entry.</param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.ExtractWithPassword(System.String,Ionic.Zip.ExtractExistingFileAction,System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified behavior when extraction would
               overwrite an existing file.
             </summary>
            
             <remarks>
               See the remarks on the <see cref="P:Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </remarks>
            
             <param name="baseDirectory">the pathname of the base directory</param>
            
             <param name="extractExistingFile">The action to take if extraction would
             overwrite an existing file.</param>
            
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.ExtractWithPassword(System.IO.Stream,System.String)">
             <summary>
               Extracts the entry to the specified stream, using the specified
               Password.  For example, the caller could extract to Console.Out, or
               to a MemoryStream.
             </summary>
            
             <remarks>
             <para>
               The caller can specify any write-able stream, for example a <see cref="T:System.IO.FileStream"/>, a <see cref="T:System.IO.MemoryStream"/>, or ASP.NET's
               <c>Response.OutputStream</c>.  The content will be decrypted and
               decompressed as necessary. If the entry is encrypted and no password
               is provided, this method will throw.
             </para>
             <para>
               The position on the stream is not reset by this method before it extracts.
               You may want to call stream.Seek() before calling ZipEntry.Extract().
             </para>
             </remarks>
            
            
             <param name="stream">
               the stream to which the entry should be extracted.
             </param>
             <param name="password">
               The password to use for decrypting the entry.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.OpenReader">
             <summary>
               Opens a readable stream corresponding to the zip entry in the
               archive.  The stream decompresses and decrypts as necessary, as it
               is read.
             </summary>
            
             <remarks>
            
             <para>
               DotNetZip offers a variety of ways to extract entries from a zip
               file.  This method allows an application to extract an entry by
               reading a <see cref="T:System.IO.Stream"/>.
             </para>
            
             <para>
               The return value is of type <see cref="T:Ionic.Crc.CrcCalculatorStream"/>.  Use it as you would any
               stream for reading.  When an application calls <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> on that stream, it will
               receive data from the zip entry that is decrypted and decompressed
               as necessary.
             </para>
            
             <para>
               <c>CrcCalculatorStream</c> adds one additional feature: it keeps a
               CRC32 checksum on the bytes of the stream as it is read.  The CRC
               value is available in the <see cref="P:Ionic.Crc.CrcCalculatorStream.Crc"/> property on the
               <c>CrcCalculatorStream</c>.  When the read is complete, your
               application
               <em>should</em> check this CRC against the <see cref="P:Ionic.Zip.ZipEntry.Crc"/>
               property on the <c>ZipEntry</c> to validate the content of the
               ZipEntry. You don't have to validate the entry using the CRC, but
               you should, to verify integrity. Check the example for how to do
               this.
             </para>
            
             <para>
               If the entry is protected with a password, then you need to provide
               a password prior to calling <see cref="M:Ionic.Zip.ZipEntry.OpenReader"/>, either by
               setting the <see cref="P:Ionic.Zip.ZipEntry.Password"/> property on the entry, or the
               <see cref="P:Ionic.Zip.ZipFile.Password"/> property on the <c>ZipFile</c>
               itself. Or, you can use <see cref="M:Ionic.Zip.ZipEntry.OpenReader(System.String)"/>, the
               overload of OpenReader that accepts a password parameter.
             </para>
            
             <para>
               If you want to extract entry data into a write-able stream that is
               already opened, like a <see cref="T:System.IO.FileStream"/>, do not
               use this method. Instead, use <see cref="M:Ionic.Zip.ZipEntry.Extract(System.IO.Stream)"/>.
             </para>
            
             <para>
               Your application may use only one stream created by OpenReader() at
               a time, and you should not call other Extract methods before
               completing your reads on a stream obtained from OpenReader().  This
               is because there is really only one source stream for the compressed
               content.  A call to OpenReader() seeks in the source stream, to the
               beginning of the compressed content.  A subsequent call to
               OpenReader() on a different entry will seek to a different position
               in the source stream, as will a call to Extract() or one of its
               overloads.  This will corrupt the state for the decompressing stream
               from the original call to OpenReader().
             </para>
            
             <para>
                The <c>OpenReader()</c> method works only when the ZipEntry is
                obtained from an instance of <c>ZipFile</c>. This method will throw
                an exception if the ZipEntry is obtained from a <see cref="T:Ionic.Zip.ZipInputStream"/>.
             </para>
             </remarks>
            
             <example>
               This example shows how to open a zip archive, then read in a named
               entry via a stream. After the read loop is complete, the code
               compares the calculated during the read loop with the expected CRC
               on the <c>ZipEntry</c>, to verify the extraction.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               ZipEntry e1= zip["Elevation.mp3"];
               using (Ionic.Zlib.CrcCalculatorStream s = e1.OpenReader())
               {
                 byte[] buffer = new byte[4096];
                 int n, totalBytesRead= 0;
                 do {
                   n = s.Read(buffer,0, buffer.Length);
                   totalBytesRead+=n;
                 } while (n&gt;0);
                  if (s.Crc32 != e1.Crc32)
                   throw new Exception(string.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32));
                  if (totalBytesRead != e1.UncompressedSize)
                   throw new Exception(string.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize));
               }
             }
             </code>
             <code lang="VB">
               Using zip As New ZipFile(ZipFileToRead)
                   Dim e1 As ZipEntry = zip.Item("Elevation.mp3")
                   Using s As Ionic.Zlib.CrcCalculatorStream = e1.OpenReader
                       Dim n As Integer
                       Dim buffer As Byte() = New Byte(4096) {}
                       Dim totalBytesRead As Integer = 0
                       Do
                           n = s.Read(buffer, 0, buffer.Length)
                           totalBytesRead = (totalBytesRead + n)
                       Loop While (n &gt; 0)
                       If (s.Crc32 &lt;&gt; e1.Crc32) Then
                           Throw New Exception(String.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32))
                       End If
                       If (totalBytesRead &lt;&gt; e1.UncompressedSize) Then
                           Throw New Exception(String.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize))
                       End If
                   End Using
               End Using
             </code>
             </example>
             <seealso cref="M:Ionic.Zip.ZipEntry.Extract(System.IO.Stream)"/>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.OpenReader(System.String)">
             <summary>
               Opens a readable stream for an encrypted zip entry in the archive.
               The stream decompresses and decrypts as necessary, as it is read.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:Ionic.Zip.ZipEntry.OpenReader"/> method for
               full details. This overload allows the application to specify a
               password for the <c>ZipEntry</c> to be read.
             </para>
             </remarks>
            
             <param name="password">The password to use for decrypting the entry.</param>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.ValidateOutput(System.String,System.IO.Stream,System.String@)">
            <summary>
            Validates that the args are consistent.
            </summary>
            <remarks>
            Only one of {baseDir, outStream} can be non-null.
            If baseDir is non-null, then the outputFile is created.
            </remarks>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.ReadEntry(Ionic.Zip.ZipContainer,System.Boolean)">
            <summary>
              Reads one <c>ZipEntry</c> from the given stream.  The content for
              the entry does not get decompressed or decrypted.  This method
              basically reads metadata, and seeks.
            </summary>
            <param name="zc">the ZipContainer this entry belongs to.</param>
            <param name="first">
              true of this is the first entry being read from the stream.
            </param>
            <returns>the <c>ZipEntry</c> read from the stream.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.FindExtraFieldSegment(System.Byte[],System.Int32,System.UInt16)">
            <summary>
              Finds a particular segment in the given extra field.
              This is used when modifying a previously-generated
              extra field, in particular when removing the AES crypto
              segment in the extra field.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.ProcessExtraField(System.IO.Stream,System.Int16)">
            <summary>
              At current cursor position in the stream, read the extra
              field, and set the properties on the ZipEntry instance
              appropriately.  This can be called when processing the
              Extra field in the Central Directory, or in the local
              header.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.GetEncodedFileNameBytes">
            <summary>
              generate and return a byte array that encodes the filename
              for the entry.
            </summary>
            <remarks>
              <para>
                side effects: generate and store into _CommentBytes the
                byte array for any comment attached to the entry. Also
                sets _actualEncoding to indicate the actual encoding
                used. The same encoding is used for both filename and
                comment.
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.PrepSourceStream">
             <summary>
               Stores the position of the entry source stream, or, if the position is
               already stored, seeks to that position.
             </summary>
            
             <remarks>
             <para>
               This method is called in prep for reading the source stream.  If PKZIP
               encryption is used, then we need to calc the CRC32 before doing the
               encryption, because the CRC is used in the 12th byte of the PKZIP
               encryption header.  So, we need to be able to seek backward in the source
               when saving the ZipEntry. This method is called from the place that
               calculates the CRC, and also from the method that does the encryption of
               the file data.
             </para>
            
             <para>
               The first time through, this method sets the _sourceStreamOriginalPosition
               field. Subsequent calls to this method seek to that position.
             </para>
             </remarks>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.CopyMetaData(Ionic.Zip.ZipEntry)">
            <summary>
            Copy metadata that may have been changed by the app.  We do this when
            resetting the zipFile instance.  If the app calls Save() on a ZipFile, then
            tries to party on that file some more, we may need to Reset() it , which
            means re-reading the entries and then copying the metadata.  I think.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.SetInputAndFigureFileLength(System.IO.Stream@)">
            <summary>
              Set the input stream and get its length, if possible.  The length is
              used for progress updates, AND, to allow an optimization in case of
              a stream/file of zero length. In that case we skip the Encrypt and
              compression Stream. (like DeflateStream or BZip2OutputStream)
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipEntry.PrepOutputStream(System.IO.Stream,System.Int64,Ionic.Zip.CountingStream@,System.IO.Stream@,System.IO.Stream@,Ionic.Crc.CrcCalculatorStream@)">
            <summary>
              Prepare the given stream for output - wrap it in a CountingStream, and
              then in a CRC stream, and an encryptor and deflator as appropriate.
            </summary>
            <remarks>
              <para>
                Previously this was used in ZipEntry.Write(), but in an effort to
                introduce some efficiencies in that method I've refactored to put the
                code inline.  This method still gets called by ZipOutputStream.
              </para>
            </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.AttributesIndicateDirectory">
            <summary>
            True if the referenced entry is a directory.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.Info">
            <summary>
            Provides a human-readable string with information about the ZipEntry.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.LastModified">
             <summary>
               The time and date at which the file indicated by the <c>ZipEntry</c> was
               last modified.
             </summary>
            
             <remarks>
             <para>
               The DotNetZip library sets the LastModified value for an entry, equal to
               the Last Modified time of the file in the filesystem.  If an entry is
               added from a stream, the library uses <c>System.DateTime.Now</c> for this
               value, for the given entry.
             </para>
            
             <para>
               This property allows the application to retrieve and possibly set the
               LastModified value on an entry, to an arbitrary value.  <see cref="T:System.DateTime"/> values with a <see cref="T:System.DateTimeKind"/>
               setting of <c>DateTimeKind.Unspecified</c> are taken to be expressed as
               <c>DateTimeKind.Local</c>.
             </para>
            
             <para>
               Be aware that because of the way <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWare's
               Zip specification</see> describes how times are stored in the zip file,
               the full precision of the <c>System.DateTime</c> datatype is not stored
               for the last modified time when saving zip files.  For more information on
               how times are formatted, see the PKZip specification.
             </para>
            
             <para>
               The actual last modified time of a file can be stored in multiple ways in
               the zip file, and they are not mutually exclusive:
             </para>
            
             <list type="bullet">
               <item>
                 In the so-called "DOS" format, which has a 2-second precision. Values
                 are rounded to the nearest even second. For example, if the time on the
                 file is 12:34:43, then it will be stored as 12:34:44. This first value
                 is accessible via the <c>LastModified</c> property. This value is always
                 present in the metadata for each zip entry.  In some cases the value is
                 invalid, or zero.
               </item>
            
               <item>
                 In the so-called "Windows" or "NTFS" format, as an 8-byte integer
                 quantity expressed as the number of 1/10 milliseconds (in other words
                 the number of 100 nanosecond units) since January 1, 1601 (UTC).  This
                 format is how Windows represents file times.  This time is accessible
                 via the <c>ModifiedTime</c> property.
               </item>
            
               <item>
                 In the "Unix" format, a 4-byte quantity specifying the number of seconds since
                 January 1, 1970 UTC.
               </item>
            
               <item>
                 In an older format, now deprecated but still used by some current
                 tools. This format is also a 4-byte quantity specifying the number of
                 seconds since January 1, 1970 UTC.
               </item>
            
             </list>
            
             <para>
               Zip tools and libraries will always at least handle (read or write) the
               DOS time, and may also handle the other time formats.  Keep in mind that
               while the names refer to particular operating systems, there is nothing in
               the time formats themselves that prevents their use on other operating
               systems.
             </para>
            
             <para>
               When reading ZIP files, the DotNetZip library reads the Windows-formatted
               time, if it is stored in the entry, and sets both <c>LastModified</c> and
               <c>ModifiedTime</c> to that value. When writing ZIP files, the DotNetZip
               library by default will write both time quantities. It can also emit the
               Unix-formatted time if desired (See <see cref="P:Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>.)
             </para>
            
             <para>
               The last modified time of the file created upon a call to
               <c>ZipEntry.Extract()</c> may be adjusted during extraction to compensate
               for differences in how the .NET Base Class Library deals with daylight
               saving time (DST) versus how the Windows filesystem deals with daylight
               saving time.  Raymond Chen <see href="http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx">provides
               some good context</see>.
             </para>
            
             <para>
               In a nutshell: Daylight savings time rules change regularly.  In 2007, for
               example, the inception week of DST changed.  In 1977, DST was in place all
               year round. In 1945, likewise.  And so on.  Win32 does not attempt to
               guess which time zone rules were in effect at the time in question.  It
               will render a time as "standard time" and allow the app to change to DST
               as necessary.  .NET makes a different choice.
             </para>
            
             <para>
               Compare the output of FileInfo.LastWriteTime.ToString("f") with what you
               see in the Windows Explorer property sheet for a file that was last
               written to on the other side of the DST transition. For example, suppose
               the file was last modified on October 17, 2003, during DST but DST is not
               currently in effect. Explorer's file properties reports Thursday, October
               17, 2003, 8:45:38 AM, but .NETs FileInfo reports Thursday, October 17,
               2003, 9:45 AM.
             </para>
            
             <para>
               Win32 says, "Thursday, October 17, 2002 8:45:38 AM PST". Note: Pacific
               STANDARD Time. Even though October 17 of that year occurred during Pacific
               Daylight Time, Win32 displays the time as standard time because that's
               what time it is NOW.
             </para>
            
             <para>
               .NET BCL assumes that the current DST rules were in place at the time in
               question.  So, .NET says, "Well, if the rules in effect now were also in
               effect on October 17, 2003, then that would be daylight time" so it
               displays "Thursday, October 17, 2003, 9:45 AM PDT" - daylight time.
             </para>
            
             <para>
               So .NET gives a value which is more intuitively correct, but is also
               potentially incorrect, and which is not invertible. Win32 gives a value
               which is intuitively incorrect, but is strictly correct.
             </para>
            
             <para>
               Because of this funkiness, this library adds one hour to the LastModified
               time on the extracted file, if necessary.  That is to say, if the time in
               question had occurred in what the .NET Base Class Library assumed to be
               DST. This assumption may be wrong given the constantly changing DST rules,
               but it is the best we can do.
             </para>
            
             </remarks>
            
        </member>
        <member name="P:Ionic.Zip.ZipEntry.ModifiedTime">
             <summary>
             Last Modified time for the file represented by the entry.
             </summary>
            
             <remarks>
            
             <para>
               This value corresponds to the "last modified" time in the NTFS file times
               as described in <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>.  When getting this property, the value may be
               different from <see cref="P:Ionic.Zip.ZipEntry.LastModified"/>.  When setting the property,
               the <see cref="P:Ionic.Zip.ZipEntry.LastModified"/> property also gets set, but with a lower
               precision.
             </para>
            
             <para>
               Let me explain. It's going to take a while, so get
               comfortable. Originally, waaaaay back in 1989 when the ZIP specification
               was originally described by the esteemed Mr. Phil Katz, the dominant
               operating system of the time was MS-DOS. MSDOS stored file times with a
               2-second precision, because, c'mon, <em>who is ever going to need better
               resolution than THAT?</em> And so ZIP files, regardless of the platform on
               which the zip file was created, store file times in exactly <see href="http://www.vsft.com/hal/dostime.htm">the same format that DOS used
               in 1989</see>.
             </para>
            
             <para>
               Since then, the ZIP spec has evolved, but the internal format for file
               timestamps remains the same.  Despite the fact that the way times are
               stored in a zip file is rooted in DOS heritage, any program on any
               operating system can format a time in this way, and most zip tools and
               libraries DO - they round file times to the nearest even second and store
               it just like DOS did 25+ years ago.
             </para>
            
             <para>
               PKWare extended the ZIP specification to allow a zip file to store what
               are called "NTFS Times" and "Unix(tm) times" for a file.  These are the
               <em>last write</em>, <em>last access</em>, and <em>file creation</em>
               times of a particular file. These metadata are not actually specific
               to NTFS or Unix. They are tracked for each file by NTFS and by various
               Unix filesystems, but they are also tracked by other filesystems, too.
               The key point is that the times are <em>formatted in the zip file</em>
               in the same way that NTFS formats the time (ticks since win32 epoch),
               or in the same way that Unix formats the time (seconds since Unix
               epoch). As with the DOS time, any tool or library running on any
               operating system is capable of formatting a time in one of these ways
               and embedding it into the zip file.
             </para>
            
             <para>
               These extended times are higher precision quantities than the DOS time.
               As described above, the (DOS) LastModified has a precision of 2 seconds.
               The Unix time is stored with a precision of 1 second. The NTFS time is
               stored with a precision of 0.0000001 seconds. The quantities are easily
               convertible, except for the loss of precision you may incur.
             </para>
            
             <para>
               A zip archive can store the {C,A,M} times in NTFS format, in Unix format,
               or not at all.  Often a tool running on Unix or Mac will embed the times
               in Unix format (1 second precision), while WinZip running on Windows might
               embed the times in NTFS format (precision of of 0.0000001 seconds).  When
               reading a zip file with these "extended" times, in either format,
               DotNetZip represents the values with the
               <c>ModifiedTime</c>, <c>AccessedTime</c> and <c>CreationTime</c>
               properties on the <c>ZipEntry</c>.
             </para>
            
             <para>
               While any zip application or library, regardless of the platform it
               runs on, could use any of the time formats allowed by the ZIP
               specification, not all zip tools or libraries do support all these
               formats.  Storing the higher-precision times for each entry is
               optional for zip files, and many tools and libraries don't use the
               higher precision quantities at all. The old DOS time, represented by
               <see cref="P:Ionic.Zip.ZipEntry.LastModified"/>, is guaranteed to be present, though it
               sometimes unset.
             </para>
            
             <para>
               Ok, getting back to the question about how the <c>LastModified</c>
               property relates to this <c>ModifiedTime</c>
               property... <c>LastModified</c> is always set, while
               <c>ModifiedTime</c> is not. (The other times stored in the <em>NTFS
               times extension</em>, <c>CreationTime</c> and <c>AccessedTime</c> also
               may not be set on an entry that is read from an existing zip file.)
               When reading a zip file, then <c>LastModified</c> takes the DOS time
               that is stored with the file. If the DOS time has been stored as zero
               in the zipfile, then this library will use <c>DateTime.Now</c> for the
               <c>LastModified</c> value.  If the ZIP file was created by an evolved
               tool, then there will also be higher precision NTFS or Unix times in
               the zip file.  In that case, this library will read those times, and
               set <c>LastModified</c> and <c>ModifiedTime</c> to the same value, the
               one corresponding to the last write time of the file.  If there are no
               higher precision times stored for the entry, then <c>ModifiedTime</c>
               remains unset (likewise <c>AccessedTime</c> and <c>CreationTime</c>),
               and <c>LastModified</c> keeps its DOS time.
             </para>
            
             <para>
               When creating zip files with this library, by default the extended time
               properties (<c>ModifiedTime</c>, <c>AccessedTime</c>, and
               <c>CreationTime</c>) are set on the ZipEntry instance, and these data are
               stored in the zip archive for each entry, in NTFS format. If you add an
               entry from an actual filesystem file, then the entry gets the actual file
               times for that file, to NTFS-level precision.  If you add an entry from a
               stream, or a string, then the times get the value <c>DateTime.Now</c>.  In
               this case <c>LastModified</c> and <c>ModifiedTime</c> will be identical,
               to 2 seconds of precision.  You can explicitly set the
               <c>CreationTime</c>, <c>AccessedTime</c>, and <c>ModifiedTime</c> of an
               entry using the property setters.  If you want to set all of those
               quantities, it's more efficient to use the <see cref="M:Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/> method.  Those
               changes are not made permanent in the zip file until you call <see cref="M:Ionic.Zip.ZipFile.Save"/> or one of its cousins.
             </para>
            
             <para>
               When creating a zip file, you can override the default behavior of
               this library for formatting times in the zip file, disabling the
               embedding of file times in NTFS format or enabling the storage of file
               times in Unix format, or both.  You may want to do this, for example,
               when creating a zip file on Windows, that will be consumed on a Mac,
               by an application that is not hip to the "NTFS times" format. To do
               this, use the <see cref="P:Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> and
               <see cref="P:Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> properties.  A valid zip
               file may store the file times in both formats.  But, there are no
               guarantees that a program running on Mac or Linux will gracefully
               handle the NTFS-formatted times when Unix times are present, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. DotNetZip will always do something
               reasonable; other libraries or tools may not. When in doubt, test.
             </para>
            
             <para>
               I'll bet you didn't think one person could type so much about time, eh?
               And reading it was so enjoyable, too!  Well, in appreciation, <see href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">maybe you
               should donate</see>?
             </para>
             </remarks>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.LastModified"/>
             <seealso cref="M:Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.AccessedTime">
            <summary>
            Last Access time for the file represented by the entry.
            </summary>
            <remarks>
            This value may or may not be meaningful.  If the <c>ZipEntry</c> was read from an existing
            Zip archive, this information may not be available. For an explanation of why, see
            <see cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>.
            </remarks>
            <seealso cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>
            <seealso cref="P:Ionic.Zip.ZipEntry.CreationTime"/>
            <seealso cref="M:Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.CreationTime">
             <summary>
             The file creation time for the file represented by the entry.
             </summary>
            
             <remarks>
             This value may or may not be meaningful.  If the <c>ZipEntry</c> was read
             from an existing zip archive, and the creation time was not set on the entry
             when the zip file was created, then this property may be meaningless. For an
             explanation of why, see <see cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>.
             </remarks>
             <seealso cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="M:Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for the given
               entry will be emitted in "Windows format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entry should or should not be stored
               in the zip archive in the format used by Windows. The default value of
               this property is <c>true</c>.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see cref="P:Ionic.Zip.ZipEntry.CreationTime"/>), Access (<see cref="P:Ionic.Zip.ZipEntry.AccessedTime"/>), and Modified
               (<see cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>) times for the given entry are automatically
               set from the filesystem values. When adding an entry from a stream or
               string, all three values are implicitly set to DateTime.Now.  Applications
               can also explicitly set those times by calling <see cref="M:Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since Jan 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since January 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455.
             </para>
            
             <para>
               Not all zip tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Although the time values are
               easily convertible, subject to a loss of precision, some tools and
               libraries may be able to read only one or the other. DotNetZip can read or
               write times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>, <see cref="P:Ionic.Zip.ZipEntry.AccessedTime"/>, and <see cref="P:Ionic.Zip.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive from the <see cref="P:Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> property.  It is
               possible that a zip entry can embed the timestamps in both forms, one
               form, or neither.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle NTFS Formatted times, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. When in doubt, test.
             </para>
            
             <para>
               Normally you will use the <see cref="P:Ionic.Zip.ZipFile.EmitTimesInWindowsFormatWhenSaving">ZipFile.EmitTimesInWindowsFormatWhenSaving</see>
               property, to specify the behavior for all entries in a zip, rather than
               the property on each individual entry.
             </para>
            
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for the given
               entry will be emitted in "Unix(tm) format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entry should or should not be stored
               in the zip archive in the format used by Unix. By default this flag is
               <c>false</c>, meaning the Unix-format times are not stored in the zip
               archive.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see cref="P:Ionic.Zip.ZipEntry.CreationTime"/>), Access (<see cref="P:Ionic.Zip.ZipEntry.AccessedTime"/>), and Modified
               (<see cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>) times for the given entry are automatically
               set from the filesystem values. When adding an entry from a stream or
               string, all three values are implicitly set to DateTime.Now.  Applications
               can also explicitly set those times by calling <see cref="M:Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since Jan 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since Jan 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455.
             </para>
            
             <para>
               Not all tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Although the time values are
               easily convertible, subject to a loss of precision, some tools and
               libraries may be able to read only one or the other. DotNetZip can read or
               write times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>, <see cref="P:Ionic.Zip.ZipEntry.AccessedTime"/>, and <see cref="P:Ionic.Zip.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive from the <see cref="P:Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> property.  It is
               possible that a zip entry can embed the timestamps in both forms, one
               form, or neither.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle NTFS Formatted times, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. When in doubt, test.
             </para>
            
             <para>
               Normally you will use the <see cref="P:Ionic.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving">ZipFile.EmitTimesInUnixFormatWhenSaving</see>
               property, to specify the behavior for all entries, rather than the
               property on each individual entry.
             </para>
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:Ionic.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.Timestamp">
             <summary>
             The type of timestamp attached to the ZipEntry.
             </summary>
            
             <remarks>
             This property is valid only for a ZipEntry that was read from a zip archive.
             It indicates the type of timestamp attached to the entry.
             </remarks>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.Attributes">
             <summary>
               The file attributes for the entry.
             </summary>
            
             <remarks>
            
             <para>
               The <see cref="T:System.IO.FileAttributes">attributes</see> in NTFS include
               ReadOnly, Archive, Hidden, System, and Indexed.  When adding a
               <c>ZipEntry</c> to a ZipFile, these attributes are set implicitly when
               adding an entry from the filesystem.  When adding an entry from a stream
               or string, the Attributes are not set implicitly.  Regardless of the way
               an entry was added to a <c>ZipFile</c>, you can set the attributes
               explicitly if you like.
             </para>
            
             <para>
               When reading a <c>ZipEntry</c> from a <c>ZipFile</c>, the attributes are
               set according to the data stored in the <c>ZipFile</c>. If you extract the
               entry from the archive to a filesystem file, DotNetZip will set the
               attributes on the resulting file accordingly.
             </para>
            
             <para>
               The attributes can be set explicitly by the application.  For example the
               application may wish to set the <c>FileAttributes.ReadOnly</c> bit for all
               entries added to an archive, so that on unpack, this attribute will be set
               on the extracted file.  Any changes you make to this property are made
               permanent only when you call a <c>Save()</c> method on the <c>ZipFile</c>
               instance that contains the ZipEntry.
             </para>
            
             <para>
               For example, an application may wish to zip up a directory and set the
               ReadOnly bit on every file in the archive, so that upon later extraction,
               the resulting files will be marked as ReadOnly.  Not every extraction tool
               respects these attributes, but if you unpack with DotNetZip, as for
               example in a self-extracting archive, then the attributes will be set as
               they are stored in the <c>ZipFile</c>.
             </para>
            
             <para>
               These attributes may not be interesting or useful if the resulting archive
               is extracted on a non-Windows platform.  How these attributes get used
               upon extraction depends on the platform and tool used.
             </para>
            
             <para>
               This property is only partially supported in the Silverlight version
               of the library: applications can read attributes on entries within
               ZipFiles. But extracting entries within Silverlight will not set the
               attributes on the extracted files.
             </para>
            
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.LocalFileName">
             <summary>
               The name of the filesystem file, referred to by the ZipEntry.
             </summary>
            
             <remarks>
              <para>
                This property specifies the thing-to-be-zipped on disk, and is set only
                when the <c>ZipEntry</c> is being created from a filesystem file.  If the
                <c>ZipFile</c> is instantiated by reading an existing .zip archive, then
                the LocalFileName will be <c>null</c> (<c>Nothing</c> in VB).
              </para>
            
              <para>
                When it is set, the value of this property may be different than <see cref="P:Ionic.Zip.ZipEntry.FileName"/>, which is the path used in the archive itself.  If you
                call <c>Zip.AddFile("foop.txt", AlternativeDirectory)</c>, then the path
                used for the <c>ZipEntry</c> within the zip archive will be different
                than this path.
              </para>
            
              <para>
               If the entry is being added from a stream, then this is null (Nothing in VB).
              </para>
            
             </remarks>
             <seealso cref="P:Ionic.Zip.ZipEntry.FileName"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.FileName">
             <summary>
               The name of the file contained in the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               This is the name of the entry in the <c>ZipFile</c> itself.  When creating
               a zip archive, if the <c>ZipEntry</c> has been created from a filesystem
               file, via a call to <see cref="M:Ionic.Zip.ZipFile.AddFile(System.String,System.String)"/> or <see cref="M:Ionic.Zip.ZipFile.AddItem(System.String,System.String)"/>, or a related overload, the value
               of this property is derived from the name of that file. The
               <c>FileName</c> property does not include drive letters, and may include a
               different directory path, depending on the value of the
               <c>directoryPathInArchive</c> parameter used when adding the entry into
               the <c>ZipFile</c>.
             </para>
            
             <para>
               In some cases there is no related filesystem file - for example when a
               <c>ZipEntry</c> is created using <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.String)"/> or one of the similar overloads.  In this case, the value of
               this property is derived from the fileName and the directory path passed
               to that method.
             </para>
            
             <para>
               When reading a zip file, this property takes the value of the entry name
               as stored in the zip file. If you extract such an entry, the extracted
               file will take the name given by this property.
             </para>
            
             <para>
               Applications can set this property when creating new zip archives or when
               reading existing archives. When setting this property, the actual value
               that is set will replace backslashes with forward slashes, in accordance
               with <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>, for compatibility with Unix(tm) and ... get
               this.... Amiga!
             </para>
            
             <para>
               If an application reads a <c>ZipFile</c> via <see cref="M:Ionic.Zip.ZipFile.Read(System.String)"/> or a related overload, and then explicitly
               sets the FileName on an entry contained within the <c>ZipFile</c>, and
               then calls <see cref="M:Ionic.Zip.ZipFile.Save"/>, the application will effectively
               rename the entry within the zip archive.
             </para>
            
             <para>
               If an application sets the value of <c>FileName</c>, then calls
               <c>Extract()</c> on the entry, the entry is extracted to a file using the
               newly set value as the filename.  The <c>FileName</c> value is made
               permanent in the zip archive only <em>after</em> a call to one of the
               <c>ZipFile.Save()</c> methods on the <c>ZipFile</c> that contains the
               ZipEntry.
             </para>
            
             <para>
               If an application attempts to set the <c>FileName</c> to a value that
               would result in a duplicate entry in the <c>ZipFile</c>, an exception is
               thrown.
             </para>
            
             <para>
               When a <c>ZipEntry</c> is contained within a <c>ZipFile</c>, applications
               cannot rename the entry within the context of a <c>foreach</c> (<c>For
               Each</c> in VB) loop, because of the way the <c>ZipFile</c> stores
               entries.  If you need to enumerate through all the entries and rename one
               or more of them, use <see cref="P:Ionic.Zip.ZipFile.EntriesSorted">ZipFile.EntriesSorted</see> as the
               collection.  See also, <see cref="M:Ionic.Zip.ZipFile.GetEnumerator">ZipFile.GetEnumerator()</see>.
             </para>
            
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.InputStream">
             <summary>
             The stream that provides content for the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               The application can use this property to set the input stream for an
               entry on a just-in-time basis. Imagine a scenario where the application
               creates a <c>ZipFile</c> comprised of content obtained from hundreds of
               files, via calls to <c>AddFile()</c>. The DotNetZip library opens streams
               on these files on a just-in-time basis, only when writing the entry out to
               an external store within the scope of a <c>ZipFile.Save()</c> call.  Only
               one input stream is opened at a time, as each entry is being written out.
             </para>
            
             <para>
               Now imagine a different application that creates a <c>ZipFile</c>
               with content obtained from hundreds of streams, added through <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)"/>.  Normally the
               application would supply an open stream to that call.  But when large
               numbers of streams are being added, this can mean many open streams at one
               time, unnecessarily.
             </para>
            
             <para>
               To avoid this, call <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.OpenDelegate,Ionic.Zip.CloseDelegate)"/> and specify delegates that open and close the stream at
               the time of Save.
             </para>
            
            
             <para>
               Setting the value of this property when the entry was not added from a
               stream (for example, when the <c>ZipEntry</c> was added with <see cref="M:Ionic.Zip.ZipFile.AddFile(System.String)"/> or <see cref="M:Ionic.Zip.ZipFile.AddDirectory(System.String)"/>, or when the entry was added by
               reading an existing zip archive) will throw an exception.
             </para>
            
             </remarks>
            
        </member>
        <member name="P:Ionic.Zip.ZipEntry.InputStreamWasJitProvided">
             <summary>
               A flag indicating whether the InputStream was provided Just-in-time.
             </summary>
            
             <remarks>
            
             <para>
               When creating a zip archive, an application can obtain content for one or
               more of the <c>ZipEntry</c> instances from streams, using the <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)"/> method.  At the time
               of calling that method, the application can supply null as the value of
               the stream parameter.  By doing so, the application indicates to the
               library that it will provide a stream for the entry on a just-in-time
               basis, at the time one of the <c>ZipFile.Save()</c> methods is called and
               the data for the various entries are being compressed and written out.
             </para>
            
             <para>
               In this case, the application can set the <see cref="P:Ionic.Zip.ZipEntry.InputStream"/>
               property, typically within the SaveProgress event (event type: <see cref="F:Ionic.Zip.ZipProgressEventType.Saving_BeforeWriteEntry"/>) for that entry.
             </para>
            
             <para>
               The application will later want to call Close() and Dispose() on that
               stream.  In the SaveProgress event, when the event type is <see cref="F:Ionic.Zip.ZipProgressEventType.Saving_AfterWriteEntry"/>, the application can
               do so.  This flag indicates that the stream has been provided by the
               application on a just-in-time basis and that it is the application's
               responsibility to call Close/Dispose on that stream.
             </para>
            
             </remarks>
             <seealso cref="P:Ionic.Zip.ZipEntry.InputStream"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.Source">
            <summary>
            An enum indicating the source of the ZipEntry.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.VersionNeeded">
             <summary>
             The version of the zip engine needed to read the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               This is a readonly property, indicating the version of <a
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</a> that the extracting tool or library must support to
               extract the given entry.  Generally higher versions indicate newer
               features.  Older zip engines obviously won't know about new features, and
               won't be able to extract entries that depend on those newer features.
             </para>
            
             <list type="table">
             <listheader>
             <term>value</term>
             <description>Features</description>
             </listheader>
            
             <item>
             <term>20</term>
             <description>a basic Zip Entry, potentially using PKZIP encryption.
             </description>
             </item>
            
             <item>
             <term>45</term>
             <description>The ZIP64 extension is used on the entry.
             </description>
             </item>
            
             <item>
             <term>46</term>
             <description> File is compressed using BZIP2 compression*</description>
             </item>
            
             <item>
             <term>50</term>
             <description> File is encrypted using PkWare's DES, 3DES, (broken) RC2 or RC4</description>
             </item>
            
             <item>
             <term>51</term>
             <description> File is encrypted using PKWare's AES encryption or corrected RC2 encryption.</description>
             </item>
            
             <item>
             <term>52</term>
             <description> File is encrypted using corrected RC2-64 encryption**</description>
             </item>
            
             <item>
             <term>61</term>
             <description> File is encrypted using non-OAEP key wrapping***</description>
             </item>
            
             <item>
             <term>63</term>
             <description> File is compressed using LZMA, PPMd+, Blowfish, or Twofish</description>
             </item>
            
             </list>
            
             <para>
               There are other values possible, not listed here. DotNetZip supports
               regular PKZip encryption, and ZIP64 extensions.  DotNetZip cannot extract
               entries that require a zip engine higher than 45.
             </para>
            
             <para>
               This value is set upon reading an existing zip file, or after saving a zip
               archive.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.Comment">
             <summary>
             The comment attached to the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               Each entry in a zip file can optionally have a comment associated to
               it. The comment might be displayed by a zip tool during extraction, for
               example.
             </para>
            
             <para>
               By default, the <c>Comment</c> is encoded in IBM437 code page. You can
               specify an alternative with <see cref="P:Ionic.Zip.ZipEntry.AlternateEncoding"/> and
              <see cref="P:Ionic.Zip.ZipEntry.AlternateEncodingUsage"/>.
             </para>
             </remarks>
             <seealso cref="P:Ionic.Zip.ZipEntry.AlternateEncoding"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.AlternateEncodingUsage"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.RequiresZip64">
             <summary>
             Indicates whether the entry requires ZIP64 extensions.
             </summary>
            
             <remarks>
            
             <para>
               This property is null (Nothing in VB) until a <c>Save()</c> method on the
               containing <see cref="T:Ionic.Zip.ZipFile"/> instance has been called. The property is
               non-null (<c>HasValue</c> is true) only after a <c>Save()</c> method has
               been called.
             </para>
            
             <para>
               After the containing <c>ZipFile</c> has been saved, the Value of this
               property is true if any of the following three conditions holds: the
               uncompressed size of the entry is larger than 0xFFFFFFFF; the compressed
               size of the entry is larger than 0xFFFFFFFF; the relative offset of the
               entry within the zip archive is larger than 0xFFFFFFFF.  These quantities
               are not known until a <c>Save()</c> is attempted on the zip archive and
               the compression is applied.
             </para>
            
             <para>
               If none of the three conditions holds, then the <c>Value</c> is false.
             </para>
            
             <para>
               A <c>Value</c> of false does not indicate that the entry, as saved in the
               zip archive, does not use ZIP64.  It merely indicates that ZIP64 is
               <em>not required</em>.  An entry may use ZIP64 even when not required if
               the <see cref="P:Ionic.Zip.ZipFile.UseZip64WhenSaving"/> property on the containing
               <c>ZipFile</c> instance is set to <see cref="F:Ionic.Zip.Zip64Option.Always"/>, or if
               the <see cref="P:Ionic.Zip.ZipFile.UseZip64WhenSaving"/> property on the containing
               <c>ZipFile</c> instance is set to <see cref="F:Ionic.Zip.Zip64Option.AsNecessary"/>
               and the output stream was not seekable.
             </para>
            
             </remarks>
             <seealso cref="P:Ionic.Zip.ZipEntry.OutputUsedZip64"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.OutputUsedZip64">
             <summary>
               Indicates whether the entry actually used ZIP64 extensions, as it was most
               recently written to the output file or stream.
             </summary>
            
             <remarks>
            
             <para>
               This Nullable property is null (Nothing in VB) until a <c>Save()</c>
               method on the containing <see cref="T:Ionic.Zip.ZipFile"/> instance has been
               called. <c>HasValue</c> is true only after a <c>Save()</c> method has been
               called.
             </para>
            
             <para>
               The value of this property for a particular <c>ZipEntry</c> may change
               over successive calls to <c>Save()</c> methods on the containing ZipFile,
               even if the file that corresponds to the <c>ZipEntry</c> does not. This
               may happen if other entries contained in the <c>ZipFile</c> expand,
               causing the offset for this particular entry to exceed 0xFFFFFFFF.
             </para>
             </remarks>
             <seealso cref="P:Ionic.Zip.ZipEntry.RequiresZip64"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.BitField">
             <summary>
               The bitfield for the entry as defined in the zip spec. You probably
               never need to look at this.
             </summary>
            
             <remarks>
             <para>
               You probably do not need to concern yourself with the contents of this
               property, but in case you do:
             </para>
            
             <list type="table">
             <listheader>
             <term>bit</term>
             <description>meaning</description>
             </listheader>
            
             <item>
             <term>0</term>
             <description>set if encryption is used.</description>
             </item>
            
             <item>
             <term>1-2</term>
             <description>
             set to determine whether normal, max, fast deflation.  DotNetZip library
             always leaves these bits unset when writing (indicating "normal"
             deflation"), but can read an entry with any value here.
             </description>
             </item>
            
             <item>
             <term>3</term>
             <description>
             Indicates that the Crc32, Compressed and Uncompressed sizes are zero in the
             local header.  This bit gets set on an entry during writing a zip file, when
             it is saved to a non-seekable output stream.
             </description>
             </item>
            
            
             <item>
             <term>4</term>
             <description>reserved for "enhanced deflating". This library doesn't do enhanced deflating.</description>
             </item>
            
             <item>
             <term>5</term>
             <description>set to indicate the zip is compressed patched data.  This library doesn't do that.</description>
             </item>
            
             <item>
             <term>6</term>
             <description>
             set if PKWare's strong encryption is used (must also set bit 1 if bit 6 is
             set). This bit is not set if WinZip's AES encryption is set.</description>
             </item>
            
             <item>
             <term>7</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>8</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>9</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>10</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>11</term>
             <description>
             Language encoding flag (EFS).  If this bit is set, the filename and comment
             fields for this file must be encoded using UTF-8. This library currently
             does not support UTF-8.
             </description>
             </item>
            
             <item>
             <term>12</term>
             <description>Reserved by PKWARE for enhanced compression.</description>
             </item>
            
             <item>
             <term>13</term>
             <description>
               Used when encrypting the Central Directory to indicate selected data
               values in the Local Header are masked to hide their actual values.  See
               the section in <a
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</a> describing the Strong Encryption Specification for
               details.
             </description>
             </item>
            
             <item>
             <term>14</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             <item>
             <term>15</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.CompressionMethod">
             <summary>
               The compression method employed for this ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
               Zip specification</see> allows a variety of compression methods.  This
               library supports just two: 0x08 = Deflate.  0x00 = Store (no compression),
               for reading or writing.
             </para>
            
             <para>
               When reading an entry from an existing zipfile, the value you retrieve
               here indicates the compression method used on the entry by the original
               creator of the zip.  When writing a zipfile, you can specify either 0x08
               (Deflate) or 0x00 (None).  If you try setting something else, you will get
               an exception.
             </para>
            
             <para>
               You may wish to set <c>CompressionMethod</c> to <c>CompressionMethod.None</c> (0)
               when zipping already-compressed data like a jpg, png, or mp3 file.
               This can save time and cpu cycles.
             </para>
            
             <para>
               When setting this property on a <c>ZipEntry</c> that is read from an
               existing zip file, calling <c>ZipFile.Save()</c> will cause the new
               CompressionMethod to be used on the entry in the newly saved zip file.
             </para>
            
             <para>
               Setting this property may have the side effect of modifying the
               <c>CompressionLevel</c> property. If you set the <c>CompressionMethod</c> to a
               value other than <c>None</c>, and <c>CompressionLevel</c> is previously
               set to <c>None</c>, then <c>CompressionLevel</c> will be set to
               <c>Default</c>.
             </para>
             </remarks>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.CompressionMethod"/>
            
             <example>
               In this example, the first entry added to the zip archive uses the default
               behavior - compression is used where it makes sense.  The second entry,
               the MP3 file, is added to the archive without being compressed.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToCreate))
             {
               ZipEntry e1= zip.AddFile(@"notes\Readme.txt");
               ZipEntry e2= zip.AddFile(@"music\StopThisTrain.mp3");
               e2.CompressionMethod = CompressionMethod.None;
               zip.Save();
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile(ZipFileToCreate)
               zip.AddFile("notes\Readme.txt")
               Dim e2 as ZipEntry = zip.AddFile("music\StopThisTrain.mp3")
               e2.CompressionMethod = CompressionMethod.None
               zip.Save
             End Using
             </code>
             </example>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.CompressionLevel">
             <summary>
               Sets the compression level to be used for the entry when saving the zip
               archive. This applies only for CompressionMethod = DEFLATE.
             </summary>
            
             <remarks>
              <para>
                When using the DEFLATE compression method, Varying the compression
                level used on entries can affect the size-vs-speed tradeoff when
                compression and decompressing data streams or files.
              </para>
            
              <para>
                If you do not set this property, the default compression level is used,
                which normally gives a good balance of compression efficiency and
                compression speed.  In some tests, using <c>BestCompression</c> can
                double the time it takes to compress, while delivering just a small
                increase in compression efficiency.  This behavior will vary with the
                type of data you compress.  If you are in doubt, just leave this setting
                alone, and accept the default.
              </para>
            
              <para>
                When setting this property on a <c>ZipEntry</c> that is read from an
                existing zip file, calling <c>ZipFile.Save()</c> will cause the new
                <c>CompressionLevel</c> to be used on the entry in the newly saved zip file.
              </para>
            
              <para>
                Setting this property may have the side effect of modifying the
                <c>CompressionMethod</c> property. If you set the <c>CompressionLevel</c>
                to a value other than <c>None</c>, <c>CompressionMethod</c> will be set
                to <c>Deflate</c>, if it was previously <c>None</c>.
              </para>
            
              <para>
                Setting this property has no effect if the <c>CompressionMethod</c> is something
                other than <c>Deflate</c> or <c>None</c>.
              </para>
             </remarks>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.CompressionMethod"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.CompressedSize">
             <summary>
               The compressed size of the file, in bytes, within the zip archive.
             </summary>
            
             <remarks>
               When reading a <c>ZipFile</c>, this value is read in from the existing
               zip file. When creating or updating a <c>ZipFile</c>, the compressed
               size is computed during compression.  Therefore the value on a
               <c>ZipEntry</c> is valid after a call to <c>Save()</c> (or one of its
               overloads) in that case.
             </remarks>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.UncompressedSize"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.UncompressedSize">
             <summary>
               The size of the file, in bytes, before compression, or after extraction.
             </summary>
            
             <remarks>
               When reading a <c>ZipFile</c>, this value is read in from the existing
               zip file. When creating or updating a <c>ZipFile</c>, the uncompressed
               size is computed during compression.  Therefore the value on a
               <c>ZipEntry</c> is valid after a call to <c>Save()</c> (or one of its
               overloads) in that case.
             </remarks>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.CompressedSize"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.CompressionRatio">
             <summary>
             The ratio of compressed size to uncompressed size of the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               This is a ratio of the compressed size to the uncompressed size of the
               entry, expressed as a double in the range of 0 to 100+. A value of 100
               indicates no compression at all.  It could be higher than 100 when the
               compression algorithm actually inflates the data, as may occur for small
               files, or uncompressible data that is encrypted.
             </para>
            
             <para>
               You could format it for presentation to a user via a format string of
               "{3,5:F0}%" to see it as a percentage.
             </para>
            
             <para>
               If the size of the original uncompressed file is 0, implying a
               denominator of 0, the return value will be zero.
             </para>
            
             <para>
               This property is valid after reading in an existing zip file, or after
               saving the <c>ZipFile</c> that contains the ZipEntry. You cannot know the
               effect of a compression transform until you try it.
             </para>
            
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.Crc">
             <summary>
             The 32-bit CRC (Cyclic Redundancy Check) on the contents of the ZipEntry.
             </summary>
            
             <remarks>
            
             <para> You probably don't need to concern yourself with this. It is used
             internally by DotNetZip to verify files or streams upon extraction.  </para>
            
             <para> The value is a <see href="http://en.wikipedia.org/wiki/CRC32">32-bit
             CRC</see> using 0xEDB88320 for the polynomial. This is the same CRC-32 used in
             PNG, MPEG-2, and other protocols and formats.  It is a read-only property; when
             creating a Zip archive, the CRC for each entry is set only after a call to
             <c>Save()</c> on the containing ZipFile. When reading an existing zip file, the value
             of this property reflects the stored CRC for the entry.  </para>
            
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.IsDirectory">
            <summary>
            True if the entry is a directory (not a file).
            This is a readonly property on the entry.
            </summary>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.UsesEncryption">
             <summary>
             A derived property that is <c>true</c> if the entry uses encryption.
             </summary>
            
             <remarks>
             <para>
               This is a readonly property on the entry.  When reading a zip file,
               the value for the <c>ZipEntry</c> is determined by the data read
               from the zip file.  After saving a ZipFile, the value of this
               property for each <c>ZipEntry</c> indicates whether encryption was
               actually used (which will have been true if the <see cref="P:Ionic.Zip.ZipEntry.Password"/> was set and the <see cref="P:Ionic.Zip.ZipEntry.Encryption"/> property
               was something other than <see cref="F:Ionic.Zip.EncryptionAlgorithm.None"/>.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.Encryption">
             <summary>
               Set this to specify which encryption algorithm to use for the entry when
               saving it to a zip archive.
             </summary>
            
             <remarks>
            
             <para>
               Set this property in order to encrypt the entry when the <c>ZipFile</c> is
               saved. When setting this property, you must also set a <see cref="P:Ionic.Zip.ZipEntry.Password"/> on the entry.  If you set a value other than <see cref="F:Ionic.Zip.EncryptionAlgorithm.None"/> on this property and do not set a
               <c>Password</c> then the entry will not be encrypted. The <c>ZipEntry</c>
               data is encrypted as the <c>ZipFile</c> is saved, when you call <see cref="M:Ionic.Zip.ZipFile.Save"/> or one of its cousins on the containing
               <c>ZipFile</c> instance. You do not need to specify the <c>Encryption</c>
               when extracting entries from an archive.
             </para>
            
             <para>
               The Zip specification from PKWare defines a set of encryption algorithms,
               and the data formats for the zip archive that support them, and PKWare
               supports those algorithms in the tools it produces. Other vendors of tools
               and libraries, such as WinZip or Xceed, typically support <em>a
               subset</em> of the algorithms specified by PKWare. These tools can
               sometimes support additional different encryption algorithms and data
               formats, not specified by PKWare. The AES Encryption specified and
               supported by WinZip is the most popular example. This library supports a
               subset of the complete set of algorithms specified by PKWare and other
               vendors.
             </para>
            
             <para>
               There is no common, ubiquitous multi-vendor standard for strong encryption
               within zip files. There is broad support for so-called "traditional" Zip
               encryption, sometimes called Zip 2.0 encryption, as <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specified
               by PKWare</see>, but this encryption is considered weak and
               breakable. This library currently supports the Zip 2.0 "weak" encryption,
               and also a stronger WinZip-compatible AES encryption, using either 128-bit
               or 256-bit key strength. If you want DotNetZip to support an algorithm
               that is not currently supported, call the author of this library and maybe
               we can talk business.
             </para>
            
             <para>
               The <see cref="T:Ionic.Zip.ZipFile"/> class also has a <see cref="P:Ionic.Zip.ZipFile.Encryption"/> property.  In most cases you will use
               <em>that</em> property when setting encryption. This property takes
               precedence over any <c>Encryption</c> set on the <c>ZipFile</c> itself.
               Typically, you would use the per-entry Encryption when most entries in the
               zip archive use one encryption algorithm, and a few entries use a
               different one.  If all entries in the zip file use the same Encryption,
               then it is simpler to just set this property on the ZipFile itself, when
               creating a zip archive.
             </para>
            
             <para>
               Some comments on updating archives: If you read a <c>ZipFile</c>, you can
               modify the Encryption on an encrypted entry: you can remove encryption
               from an entry that was encrypted; you can encrypt an entry that was not
               encrypted previously; or, you can change the encryption algorithm.  The
               changes in encryption are not made permanent until you call Save() on the
               <c>ZipFile</c>.  To effect changes in encryption, the entry content is
               streamed through several transformations, depending on the modification
               the application has requested. For example if the entry is not encrypted
               and the application sets <c>Encryption</c> to <c>PkzipWeak</c>, then at
               the time of <c>Save()</c>, the original entry is read and decompressed,
               then re-compressed and encrypted.  Conversely, if the original entry is
               encrypted with <c>PkzipWeak</c> encryption, and the application sets the
               <c>Encryption</c> property to <c>WinZipAes128</c>, then at the time of
               <c>Save()</c>, the original entry is decrypted via PKZIP encryption and
               decompressed, then re-compressed and re-encrypted with AES.  This all
               happens automatically within the library, but it can be time-consuming for
               large entries.
             </para>
            
             <para>
               Additionally, when updating archives, it is not possible to change the
               password when changing the encryption algorithm.  To change both the
               algorithm and the password, you need to Save() the zipfile twice.  First
               set the <c>Encryption</c> to None, then call <c>Save()</c>.  Then set the
               <c>Encryption</c> to the new value (not "None"), then call <c>Save()</c>
               once again.
             </para>
            
             <para>
               The WinZip AES encryption algorithms are not supported on the .NET Compact
               Framework.
             </para>
             </remarks>
            
             <example>
             <para>
               This example creates a zip archive that uses encryption, and then extracts
               entries from the archive.  When creating the zip archive, the ReadMe.txt
               file is zipped without using a password or encryption.  The other file
               uses encryption.
             </para>
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt")
                 ZipEntry e1= zip.AddFile("2008-Regional-Sales-Report.pdf");
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256;
                 e1.Password= "Top.Secret.No.Peeking!";
                 zip.Save("EncryptedArchive.zip");
             }
            
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 // Specify the password that is used during extraction, for
                 // all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.AddFile("ReadMe.txt")
                 Dim e1 as ZipEntry
                 e1= zip.AddFile("2008-Regional-Sales-Report.pdf")
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256
                 e1.Password= "Top.Secret.No.Peeking!"
                 zip.Save("EncryptedArchive.zip")
             End Using
            
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 ' Specify the password that is used during extraction, for
                 ' all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown in the setter if EncryptionAlgorithm.Unsupported is specified.
             </exception>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.Password">ZipEntry.Password</seealso>
             <seealso cref="P:Ionic.Zip.ZipFile.Encryption">ZipFile.Encryption</seealso>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.Password">
             <summary>
             The Password to be used when encrypting a <c>ZipEntry</c> upon
             <c>ZipFile.Save()</c>, or when decrypting an entry upon Extract().
             </summary>
            
             <remarks>
             <para>
               This is a write-only property on the entry. Set this to request that the
               entry be encrypted when writing the zip archive, or set it to specify the
               password to be used when extracting an existing entry that is encrypted.
             </para>
            
             <para>
               The password set here is implicitly used to encrypt the entry during the
               <see cref="M:Ionic.Zip.ZipFile.Save"/> operation, or to decrypt during the <see cref="M:Ionic.Zip.ZipEntry.Extract"/> or <see cref="M:Ionic.Zip.ZipEntry.OpenReader"/> operation.  If you set
               the Password on a <c>ZipEntry</c> after calling <c>Save()</c>, there is no
               effect.
             </para>
            
             <para>
               Consider setting the <see cref="P:Ionic.Zip.ZipEntry.Encryption"/> property when using a
               password. Answering concerns that the standard password protection
               supported by all zip tools is weak, WinZip has extended the ZIP
               specification with a way to use AES Encryption to protect entries in the
               Zip file. Unlike the "PKZIP 2.0" encryption specified in the PKZIP
               specification, <see href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES
               Encryption</see> uses a standard, strong, tested, encryption
               algorithm. DotNetZip can create zip archives that use WinZip-compatible
               AES encryption, if you set the <see cref="P:Ionic.Zip.ZipEntry.Encryption"/> property. But,
               archives created that use AES encryption may not be readable by all other
               tools and libraries. For example, Windows Explorer cannot read a
               "compressed folder" (a zip file) that uses AES encryption, though it can
               read a zip file that uses "PKZIP encryption."
             </para>
            
             <para>
               The <see cref="T:Ionic.Zip.ZipFile"/> class also has a <see cref="P:Ionic.Zip.ZipFile.Password"/>
               property.  This property takes precedence over any password set on the
               ZipFile itself.  Typically, you would use the per-entry Password when most
               entries in the zip archive use one password, and a few entries use a
               different password.  If all entries in the zip file use the same password,
               then it is simpler to just set this property on the ZipFile itself,
               whether creating a zip archive or extracting a zip archive.
             </para>
            
             <para>
               Some comments on updating archives: If you read a <c>ZipFile</c>, you
               cannot modify the password on any encrypted entry, except by extracting
               the entry with the original password (if any), removing the original entry
               via <see cref="M:Ionic.Zip.ZipFile.RemoveEntry(Ionic.Zip.ZipEntry)"/>, and then adding a new
               entry with a new Password.
             </para>
            
             <para>
               For example, suppose you read a <c>ZipFile</c>, and there is an encrypted
               entry.  Setting the Password property on that <c>ZipEntry</c> and then
               calling <c>Save()</c> on the <c>ZipFile</c> does not update the password
               on that entry in the archive.  Neither is an exception thrown. Instead,
               what happens during the <c>Save()</c> is the existing entry is copied
               through to the new zip archive, in its original encrypted form. Upon
               re-reading that archive, the entry can be decrypted with its original
               password.
             </para>
            
             <para>
               If you read a ZipFile, and there is an un-encrypted entry, you can set the
               <c>Password</c> on the entry and then call Save() on the ZipFile, and get
               encryption on that entry.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example creates a zip file with two entries, and then extracts the
               entries from the zip file.  When creating the zip file, the two files are
               added to the zip file using password protection. Each entry uses a
               different password.  During extraction, each file is extracted with the
               appropriate password.
             </para>
             <code>
             // create a file with encryption
             using (ZipFile zip = new ZipFile())
             {
                 ZipEntry entry;
                 entry= zip.AddFile("Declaration.txt");
                 entry.Password= "123456!";
                 entry = zip.AddFile("Report.xls");
                 entry.Password= "1Secret!";
                 zip.Save("EncryptedArchive.zip");
             }
            
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 ZipEntry entry;
                 entry = zip["Declaration.txt"];
                 entry.Password = "123456!";
                 entry.Extract("extractDir");
                 entry = zip["Report.xls"];
                 entry.Password = "1Secret!";
                 entry.Extract("extractDir");
             }
            
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim entry as ZipEntry
                 entry= zip.AddFile("Declaration.txt")
                 entry.Password= "123456!"
                 entry = zip.AddFile("Report.xls")
                 entry.Password= "1Secret!"
                 zip.Save("EncryptedArchive.zip")
             End Using
            
            
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 Dim entry as ZipEntry
                 entry = zip("Declaration.txt")
                 entry.Password = "123456!"
                 entry.Extract("extractDir")
                 entry = zip("Report.xls")
                 entry.Password = "1Secret!"
                 entry.Extract("extractDir")
             End Using
            
             </code>
            
             </example>
            
             <seealso cref="P:Ionic.Zip.ZipEntry.Encryption"/>
             <seealso cref="P:Ionic.Zip.ZipFile.Password">ZipFile.Password</seealso>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.ExtractExistingFile">
             <summary>
             The action the library should take when extracting a file that already exists.
             </summary>
            
             <remarks>
               <para>
                 This property affects the behavior of the Extract methods (one of the
                 <c>Extract()</c> or <c>ExtractWithPassword()</c> overloads), when
                 extraction would would overwrite an existing filesystem file. If you do
                 not set this property, the library throws an exception when extracting
                 an entry would overwrite an existing file.
               </para>
            
               <para>
                 This property has no effect when extracting to a stream, or when the file to be
                 extracted does not already exist.
               </para>
            
             </remarks>
             <seealso cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>
            
             <example>
               This example shows how to set the <c>ExtractExistingFile</c> property in
               an <c>ExtractProgress</c> event, in response to user input. The
               <c>ExtractProgress</c> event is invoked if and only if the
               <c>ExtractExistingFile</c> property was previously set to
               <c>ExtractExistingFileAction.InvokeExtractProgressEvent</c>.
             <code lang="C#">
             public static void ExtractProgress(object sender, ExtractProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Extracting_BeforeExtractEntry)
                     Console.WriteLine("extract {0} ", e.CurrentEntry.FileName);
            
                 else if (e.EventType == ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite)
                 {
                     ZipEntry entry = e.CurrentEntry;
                     string response = null;
                     // Ask the user if he wants overwrite the file
                     do
                     {
                         Console.Write("Overwrite {0} in {1} ? (y/n/C) ", entry.FileName, e.ExtractLocation);
                         response = Console.ReadLine();
                         Console.WriteLine();
            
                     } while (response != null &amp;&amp; response[0]!='Y' &amp;&amp;
                              response[0]!='N' &amp;&amp; response[0]!='C');
            
                     if  (response[0]=='C')
                         e.Cancel = true;
                     else if (response[0]=='Y')
                         entry.ExtractExistingFile = ExtractExistingFileAction.OverwriteSilently;
                     else
                         entry.ExtractExistingFile= ExtractExistingFileAction.DoNotOverwrite;
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.ZipErrorAction">
             <summary>
               The action to take when an error is encountered while
               opening or reading files as they are saved into a zip archive.
             </summary>
            
             <remarks>
              <para>
                 Errors can occur within a call to <see cref="M:Ionic.Zip.ZipFile.Save">ZipFile.Save</see>, as the various files contained
                 in a ZipFile are being saved into the zip archive.  During the
                 <c>Save</c>, DotNetZip will perform a <c>File.Open</c> on the file
                 associated to the ZipEntry, and then will read the entire contents of
                 the file as it is zipped. Either the open or the Read may fail, because
                 of lock conflicts or other reasons.  Using this property, you can
                 specify the action to take when such errors occur.
              </para>
            
              <para>
                 Typically you will NOT set this property on individual ZipEntry
                 instances.  Instead, you will set the <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction">ZipFile.ZipErrorAction</see> property on
                 the ZipFile instance, before adding any entries to the
                 <c>ZipFile</c>. If you do this, errors encountered on behalf of any of
                 the entries in the ZipFile will be handled the same way.
              </para>
            
              <para>
                 But, if you use a <see cref="E:Ionic.Zip.ZipFile.ZipError"/> handler, you will want
                 to set this property on the <c>ZipEntry</c> within the handler, to
                 communicate back to DotNetZip what you would like to do with the
                 particular error.
              </para>
            
             </remarks>
             <seealso cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>
             <seealso cref="E:Ionic.Zip.ZipFile.ZipError"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.IncludedInMostRecentSave">
            <summary>
            Indicates whether the entry was included in the most recent save.
            </summary>
            <remarks>
            An entry can be excluded or skipped from a save if there is an error
            opening or reading the entry.
            </remarks>
            <seealso cref="P:Ionic.Zip.ZipEntry.ZipErrorAction"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.SetCompression">
             <summary>
               A callback that allows the application to specify the compression to use
               for a given entry that is about to be added to the zip archive.
             </summary>
            
             <remarks>
             <para>
               See <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.UseUnicodeAsNecessary">
             <summary>
               Set to indicate whether to use UTF-8 encoding for filenames and comments.
             </summary>
            
             <remarks>
            
             <para>
               If this flag is set, the comment and filename for the entry will be
               encoded with UTF-8, as described in <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>, if necessary. "Necessary" means, the filename or
               entry comment (if any) cannot be reflexively encoded and decoded using the
               default code page, IBM437.
             </para>
            
             <para>
               Setting this flag to true is equivalent to setting <see cref="P:Ionic.Zip.ZipEntry.ProvisionalAlternateEncoding"/> to <c>System.Text.Encoding.UTF8</c>.
             </para>
            
             <para>
               This flag has no effect or relation to the text encoding used within the
               file itself.
             </para>
            
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use for the FileName and Comment on this ZipEntry,
               when the default encoding is insufficient.
             </summary>
            
             <remarks>
            
             <para>
               Don't use this property.  See <see cref="P:Ionic.Zip.ZipEntry.AlternateEncoding"/>.
             </para>
            
             </remarks>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.AlternateEncoding">
            <summary>
              Specifies the alternate text encoding used by this ZipEntry
            </summary>
            <remarks>
              <para>
                The default text encoding used in Zip files for encoding filenames and
                comments is IBM437, which is something like a superset of ASCII.  In
                cases where this is insufficient, applications can specify an
                alternate encoding.
              </para>
              <para>
                When creating a zip file, the usage of the alternate encoding is
                governed by the <see cref="P:Ionic.Zip.ZipEntry.AlternateEncodingUsage"/> property.
                Typically you would set both properties to tell DotNetZip to employ an
                encoding that is not IBM437 in the zipfile you are creating.
              </para>
              <para>
                Keep in mind that because the ZIP specification states that the only
                valid encodings to use are IBM437 and UTF-8, if you use something
                other than that, then zip tools and libraries may not be able to
                successfully read the zip archive you generate.
              </para>
              <para>
                The zip specification states that applications should presume that
                IBM437 is in use, except when a special bit is set, which indicates
                UTF-8. There is no way to specify an arbitrary code page, within the
                zip file itself. When you create a zip file encoded with gb2312 or
                ibm861 or anything other than IBM437 or UTF-8, then the application
                that reads the zip file needs to "know" which code page to use. In
                some cases, the code page used when reading is chosen implicitly. For
                example, WinRar uses the ambient code page for the host desktop
                operating system. The pitfall here is that if you create a zip in
                Copenhagen and send it to Tokyo, the reader of the zipfile may not be
                able to decode successfully.
              </para>
            </remarks>
            <example>
              This example shows how to create a zipfile encoded with a
              language-specific encoding:
            <code>
              using (var zip = new ZipFile())
              {
                 zip.AlternateEnoding = System.Text.Encoding.GetEncoding("ibm861");
                 zip.AlternateEnodingUsage = ZipOption.Always;
                 zip.AddFileS(arrayOfFiles);
                 zip.Save("Myarchive-Encoded-in-IBM861.zip");
              }
            </code>
            </example>
            <seealso cref="P:Ionic.Zip.ZipFile.AlternateEncodingUsage"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.AlternateEncodingUsage">
            <summary>
              Describes if and when this instance should apply
              AlternateEncoding to encode the FileName and Comment, when
              saving.
            </summary>
            <seealso cref="P:Ionic.Zip.ZipFile.AlternateEncoding"/>
        </member>
        <member name="P:Ionic.Zip.ZipEntry.IsText">
             <summary>
               Indicates whether an entry is marked as a text file. Be careful when
               using on this property. Unless you have a good reason, you should
               probably ignore this property.
             </summary>
            
             <remarks>
             <para>
               The ZIP format includes a provision for specifying whether an entry in
               the zip archive is a text or binary file.  This property exposes that
               metadata item. Be careful when using this property: It's not clear
               that this property as a firm meaning, across tools and libraries.
             </para>
            
             <para>
               To be clear, when reading a zip file, the property value may or may
               not be set, and its value may or may not be valid.  Not all entries
               that you may think of as "text" entries will be so marked, and entries
               marked as "text" are not guaranteed in any way to be text entries.
               Whether the value is set and set correctly depends entirely on the
               application that produced the zip file.
             </para>
            
             <para>
               There are many zip tools available, and when creating zip files, some
               of them "respect" the IsText metadata field, and some of them do not.
               Unfortunately, even when an application tries to do "the right thing",
               it's not always clear what "the right thing" is.
             </para>
            
             <para>
               There's no firm definition of just what it means to be "a text file",
               and the zip specification does not help in this regard. Twenty years
               ago, text was ASCII, each byte was less than 127. IsText meant, all
               bytes in the file were less than 127.  These days, it is not the case
               that all text files have all bytes less than 127.  Any unicode file
               may have bytes that are above 0x7f.  The zip specification has nothing
               to say on this topic. Therefore, it's not clear what IsText really
               means.
             </para>
            
             <para>
               This property merely tells a reading application what is stored in the
               metadata for an entry, without guaranteeing its validity or its
               meaning.
             </para>
            
             <para>
               When DotNetZip is used to create a zipfile, it attempts to set this
               field "correctly." For example, if a file ends in ".txt", this field
               will be set. Your application may override that default setting.  When
               writing a zip file, you must set the property before calling
               <c>Save()</c> on the ZipFile.
             </para>
            
             <para>
               When reading a zip file, a more general way to decide just what kind
               of file is contained in a particular entry is to use the file type
               database stored in the operating system.  The operating system stores
               a table that says, a file with .jpg extension is a JPG image file, a
               file with a .xml extension is an XML document, a file with a .txt is a
               pure ASCII text document, and so on.  To get this information on
               Windows, <see
               href="http://www.codeproject.com/KB/cs/GetFileTypeAndIcon.aspx"> you
               need to read and parse the registry.</see> </para>
             </remarks>
            
             <example>
             <code>
             using (var zip = new ZipFile())
             {
                 var e = zip.UpdateFile("Descriptions.mme", "");
                 e.IsText = true;
                 zip.Save(zipPath);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim e2 as ZipEntry = zip.AddFile("Descriptions.mme", "")
                 e.IsText= True
                 zip.Save(zipPath)
             End Using
             </code>
             </example>
        </member>
        <member name="T:Ionic.Zip.ZipEntryTimestamp">
             <summary>
               An enum that specifies the type of timestamp available on the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               The last modified time of a file can be stored in multiple ways in
               a zip file, and they are not mutually exclusive:
             </para>
            
             <list type="bullet">
               <item>
                 In the so-called "DOS" format, which has a 2-second precision. Values
                 are rounded to the nearest even second. For example, if the time on the
                 file is 12:34:43, then it will be stored as 12:34:44. This first value
                 is accessible via the <c>LastModified</c> property. This value is always
                 present in the metadata for each zip entry.  In some cases the value is
                 invalid, or zero.
               </item>
            
               <item>
                 In the so-called "Windows" or "NTFS" format, as an 8-byte integer
                 quantity expressed as the number of 1/10 milliseconds (in other words
                 the number of 100 nanosecond units) since January 1, 1601 (UTC).  This
                 format is how Windows represents file times.  This time is accessible
                 via the <c>ModifiedTime</c> property.
               </item>
            
               <item>
                 In the "Unix" format, a 4-byte quantity specifying the number of seconds since
                 January 1, 1970 UTC.
               </item>
            
               <item>
                 In an older format, now deprecated but still used by some current
                 tools. This format is also a 4-byte quantity specifying the number of
                 seconds since January 1, 1970 UTC.
               </item>
            
             </list>
            
             <para>
               This bit field describes which of the formats were found in a <c>ZipEntry</c> that was read.
             </para>
            
             </remarks>
        </member>
        <member name="F:Ionic.Zip.ZipEntryTimestamp.None">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipEntryTimestamp.DOS">
            <summary>
            A DOS timestamp with 2-second precision.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipEntryTimestamp.Windows">
            <summary>
            A Windows timestamp with 100-ns precision.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipEntryTimestamp.Unix">
            <summary>
            A Unix timestamp with 1-second precision.
            </summary>
        </member>
        <member name="F:Ionic.Zip.ZipEntryTimestamp.InfoZip1">
            <summary>
            A Unix timestamp with 1-second precision, stored in InfoZip v1 format.  This
            format is outdated and is supported for reading archives only.
            </summary>
        </member>
        <member name="T:Ionic.Zip.CompressionMethod">
             <summary>
               The method of compression to use for a particular ZipEntry.
             </summary>
            
             <remarks>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWare's
               ZIP Specification</see> describes a number of distinct
               cmopression methods that can be used within a zip
               file. DotNetZip supports a subset of them.
             </remarks>
        </member>
        <member name="F:Ionic.Zip.CompressionMethod.None">
            <summary>
            No compression at all. For COM environments, the value is 0 (zero).
            </summary>
        </member>
        <member name="F:Ionic.Zip.CompressionMethod.Deflate">
            <summary>
              DEFLATE compression, as described in <see
              href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC
              1951</see>.  This is the "normal" compression used in zip
              files. For COM environments, the value is 8.
            </summary>
        </member>
        <member name="F:Ionic.Zip.CompressionMethod.BZip2">
            <summary>
              BZip2 compression, a compression algorithm developed by Julian Seward.
              For COM environments, the value is 12.
            </summary>
        </member>
        <member name="T:Ionic.Zip.ZipFile">
             <summary>
               The ZipFile type represents a zip archive file.
             </summary>
            
             <remarks>
             <para>
               This is the main type in the DotNetZip class library. This class reads and
               writes zip files, as defined in the <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specification
               for zip files described by PKWare</see>.  The compression for this
               implementation is provided by a managed-code version of Zlib, included with
               DotNetZip in the classes in the Ionic.Zlib namespace.
             </para>
            
             <para>
               This class provides a general purpose zip file capability.  Use it to read,
               create, or update zip files.  When you want to create zip files using a
               <c>Stream</c> type to write the zip file, you may want to consider the <see cref="T:Ionic.Zip.ZipOutputStream"/> class.
             </para>
            
             <para>
               Both the <c>ZipOutputStream</c> class and the <c>ZipFile</c> class can
               be used to create zip files. Both of them support many of the common zip
               features, including Unicode, different compression methods and levels,
               and ZIP64. They provide very similar performance when creating zip
               files.
             </para>
            
             <para>
               The <c>ZipFile</c> class is generally easier to use than
               <c>ZipOutputStream</c> and should be considered a higher-level interface.  For
               example, when creating a zip file via calls to the <c>PutNextEntry()</c> and
               <c>Write()</c> methods on the <c>ZipOutputStream</c> class, the caller is
               responsible for opening the file, reading the bytes from the file, writing
               those bytes into the <c>ZipOutputStream</c>, setting the attributes on the
               <c>ZipEntry</c>, and setting the created, last modified, and last accessed
               timestamps on the zip entry. All of these things are done automatically by a
               call to <see cref="M:Ionic.Zip.ZipFile.AddFile(System.String,System.String)">ZipFile.AddFile()</see>.
               For this reason, the <c>ZipOutputStream</c> is generally recommended for use
               only when your application emits arbitrary data, not necessarily data from a
               filesystem file, directly into a zip file, and does so using a <c>Stream</c>
               metaphor.
             </para>
            
             <para>
               Aside from the differences in programming model, there are other
               differences in capability between the two classes.
             </para>
            
             <list type="bullet">
               <item>
                 <c>ZipFile</c> can be used to read and extract zip files, in addition to
                 creating zip files. <c>ZipOutputStream</c> cannot read zip files. If you want
                 to use a stream to read zip files, check out the <see cref="T:Ionic.Zip.ZipInputStream"/> class.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> does not support the creation of segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> cannot produce a self-extracting archive.
               </item>
             </list>
            
             <para>
               Be aware that the <c>ZipFile</c> class implements the <see cref="T:System.IDisposable"/> interface.  In order for <c>ZipFile</c> to
               produce a valid zip file, you use use it within a using clause (<c>Using</c>
               in VB), or call the <c>Dispose()</c> method explicitly.  See the examples
               for how to employ a using clause.
             </para>
            
             </remarks>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddItem(System.String)">
             <summary>
               Adds an item, either a file or a directory, to a zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method is handy if you are adding things to zip archive and don't
               want to bother distinguishing between directories or files.  Any files are
               added as single entries.  A directory added through this method is added
               recursively: all files and subdirectories contained within the directory
               are added to the <c>ZipFile</c>.
             </para>
            
             <para>
               The name of the item may be a relative path or a fully-qualified
               path. Remember, the items contained in <c>ZipFile</c> instance get written
               to the disk only when you call <see cref="M:Ionic.Zip.ZipFile.Save"/> or a similar
               save method.
             </para>
            
             <para>
               The directory name used for the file within the archive is the same
               as the directory name (potentially a relative path) specified in the
               <paramref name="fileOrDirectoryName"/>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <overloads>This method has two overloads.</overloads>
             <param name="fileOrDirectoryName">
             the name of the file or directory to add.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddItem(System.String,System.String)">
             <summary>
               Adds an item, either a file or a directory, to a zip file archive,
               explicitly specifying the directory path to be used in the archive.
             </summary>
            
             <remarks>
             <para>
               If adding a directory, the add is recursive on all files and
               subdirectories contained within it.
             </para>
             <para>
               The name of the item may be a relative path or a fully-qualified path.
               The item added by this call to the <c>ZipFile</c> is not read from the
               disk nor written to the zip file archive until the application calls
               Save() on the <c>ZipFile</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive, which would override the
               "natural" path of the filesystem file.
             </para>
            
             <para>
               Encryption will be used on the file data if the <c>Password</c> has
               been set on the <c>ZipFile</c> object, prior to calling this method.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <exception cref="T:System.IO.FileNotFoundException">
               Thrown if the file or directory passed in does not exist.
             </exception>
            
             <param name="fileOrDirectoryName">the name of the file or directory to add.
             </param>
            
             <param name="directoryPathInArchive">
               The name of the directory path to use within the zip archive.  This path
               need not refer to an extant directory in the current filesystem.  If the
               files within the zip are later extracted, this is the path used for the
               extracted file.  Passing <c>null</c> (<c>Nothing</c> in VB) will use the
               path on the fileOrDirectoryName.  Passing the empty string ("") will
               insert the item at the root path within the archive.
             </param>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <example>
               This example shows how to zip up a set of files into a flat hierarchy,
               regardless of where in the filesystem the files originated. The resulting
               zip archive will contain a toplevel directory named "flat", which itself
               will contain files Readme.txt, MyProposal.docx, and Image1.jpg.  A
               subdirectory under "flat" called SupportFiles will contain all the files
               in the "c:\SupportFiles" directory on disk.
            
             <code>
             String[] itemnames= {
               "c:\\fixedContent\\Readme.txt",
               "MyProposal.docx",
               "c:\\SupportFiles",  // a directory
               "images\\Image1.jpg"
             };
            
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 for (int i = 1; i &lt; itemnames.Length; i++)
                 {
                   // will add Files or Dirs, recurses and flattens subdirectories
                   zip.AddItem(itemnames[i],"flat");
                 }
                 zip.Save(ZipToCreate);
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Dim itemnames As String() = _
                 New String() { "c:\fixedContent\Readme.txt", _
                                "MyProposal.docx", _
                                "SupportFiles", _
                                "images\Image1.jpg" }
               Try
                   Using zip As New ZipFile
                       Dim i As Integer
                       For i = 1 To itemnames.Length - 1
                           ' will add Files or Dirs, recursing and flattening subdirectories.
                           zip.AddItem(itemnames(i), "flat")
                       Next i
                       zip.Save(ZipToCreate)
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString())
               End Try
             </code>
             </example>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddFile(System.String)">
             <summary>
               Adds a File to a Zip file archive.
             </summary>
             <remarks>
            
             <para>
               This call collects metadata for the named file in the filesystem,
               including the file attributes and the timestamp, and inserts that metadata
               into the resulting ZipEntry.  Only when the application calls Save() on
               the <c>ZipFile</c>, does DotNetZip read the file from the filesystem and
               then write the content to the zip file archive.
             </para>
            
             <para>
               This method will throw an exception if an entry with the same name already
               exists in the <c>ZipFile</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this example, three files are added to a Zip archive. The ReadMe.txt
               file will be placed in the root of the archive. The .png file will be
               placed in a folder within the zip called photos\personal.  The pdf file
               will be included into a folder within the zip called Desktop.
             </para>
             <code>
                try
                {
                  using (ZipFile zip = new ZipFile())
                  {
                    zip.AddFile("c:\\photos\\personal\\7440-N49th.png");
                    zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf");
                    zip.AddFile("ReadMe.txt");
            
                    zip.Save("Package.zip");
                  }
                }
                catch (System.Exception ex1)
                {
                  System.Console.Error.WriteLine("exception: " + ex1);
                }
             </code>
            
             <code lang="VB">
              Try
                   Using zip As ZipFile = New ZipFile
                       zip.AddFile("c:\photos\personal\7440-N49th.png")
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf")
                       zip.AddFile("ReadMe.txt")
                       zip.Save("Package.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString)
               End Try
             </code>
             </example>
            
             <overloads>This method has two overloads.</overloads>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateFile(System.String)"/>
            
             <param name="fileName">
               The name of the file to add. It should refer to a file in the filesystem.
               The name of the file may be a relative path or a fully-qualified path.
             </param>
             <returns>The <c>ZipEntry</c> corresponding to the File added.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddFile(System.String,System.String)">
             <summary>
               Adds a File to a Zip file archive, potentially overriding the path to be
               used within the zip archive.
             </summary>
            
             <remarks>
             <para>
               The file added by this call to the <c>ZipFile</c> is not written to the
               zip file archive until the application calls Save() on the <c>ZipFile</c>.
             </para>
            
             <para>
               This method will throw an exception if an entry with the same name already
               exists in the <c>ZipFile</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this example, three files are added to a Zip archive. The ReadMe.txt
               file will be placed in the root of the archive. The .png file will be
               placed in a folder within the zip called images.  The pdf file will be
               included into a folder within the zip called files\docs, and will be
               encrypted with the given password.
             </para>
             <code>
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 // the following entry will be inserted at the root in the archive.
                 zip.AddFile("c:\\datafiles\\ReadMe.txt", "");
                 // this image file will be inserted into the "images" directory in the archive.
                 zip.AddFile("c:\\photos\\personal\\7440-N49th.png", "images");
                 // the following will result in a password-protected file called
                 // files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                 zip.Password = "EncryptMe!";
                 zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf", "files\\docs");
                 zip.Save("Archive.zip");
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Try
                   Using zip As ZipFile = New ZipFile
                       ' the following entry will be inserted at the root in the archive.
                       zip.AddFile("c:\datafiles\ReadMe.txt", "")
                       ' this image file will be inserted into the "images" directory in the archive.
                       zip.AddFile("c:\photos\personal\7440-N49th.png", "images")
                       ' the following will result in a password-protected file called
                       ' files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                       zip.Password = "EncryptMe!"
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf", "files\documents")
                       zip.Save("Archive.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1)
               End Try
             </code>
             </example>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
            
             <param name="fileName">
               The name of the file to add.  The name of the file may be a relative path
               or a fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the fileName.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on the fileName, if any.  Passing the empty string
               ("") will insert the item at the root path within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> corresponding to the file added.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.RemoveEntries(System.Collections.Generic.ICollection{Ionic.Zip.ZipEntry})">
             <summary>
               This method removes a collection of entries from the <c>ZipFile</c>.
             </summary>
            
             <param name="entriesToRemove">
               A collection of ZipEntry instances from this zip file to be removed. For
               example, you can pass in an array of ZipEntry instances; or you can call
               SelectEntries(), and then add or remove entries from that
               ICollection&lt;ZipEntry&gt; (ICollection(Of ZipEntry) in VB), and pass
               that ICollection to this method.
             </param>
            
             <seealso cref="M:Ionic.Zip.ZipFile.SelectEntries(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.RemoveSelectedEntries(System.String)"/>
        </member>
        <member name="M:Ionic.Zip.ZipFile.RemoveEntries(System.Collections.Generic.ICollection{System.String})">
             <summary>
               This method removes a collection of entries from the <c>ZipFile</c>, by name.
             </summary>
            
             <param name="entriesToRemove">
               A collection of strings that refer to names of entries to be removed
               from the <c>ZipFile</c>.  For example, you can pass in an array or a
               List of Strings that provide the names of entries to be removed.
             </param>
            
             <seealso cref="M:Ionic.Zip.ZipFile.SelectEntries(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.RemoveSelectedEntries(System.String)"/>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
               This method adds a set of files to the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Use this method to add a set of files to the zip archive, in one call.
               For example, a list of files received from
               <c>System.IO.Directory.GetFiles()</c> can be added to a zip archive in one
               call.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The collection of names of the files to add. Each string should refer to a
               file in the filesystem. The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <example>
               This example shows how to create a zip file, and add a few files into it.
             <code>
             String ZipFileToCreate = "archive1.zip";
             String DirectoryToZip = "c:\\reports";
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames);
               zip.Save(ZipFileToCreate);
             }
             </code>
            
             <code lang="VB">
             Dim ZipFileToCreate As String = "archive1.zip"
             Dim DirectoryToZip As String = "c:\reports"
             Using zip As ZipFile = New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames)
                 zip.Save(ZipFileToCreate)
             End Using
             </code>
             </example>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)"/>
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
               Adds or updates a set of files in the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Any files that already exist in the archive are updated. Any files that
               don't yet exist in the archive are added.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The collection of names of the files to update. Each string should refer to a file in
               the filesystem. The name of the file may be a relative path or a fully-qualified path.
             </param>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
               Adds a set of files to the <c>ZipFile</c>, using the
               specified directory path in the archive.
             </summary>
            
             <remarks>
             <para>
               Any directory structure that may be present in the
               filenames contained in the list is "flattened" in the
               archive.  Each file in the list is added to the archive in
               the specified top-level directory.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>, <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their respective values at the
               time of this call will be applied to each ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The names of the files to add. Each string should refer to
               a file in the filesystem.  The name of the file may be a
               relative path or a fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the file name.
               Th is path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)"/>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
             <summary>
               Adds a set of files to the <c>ZipFile</c>, using the specified directory
               path in the archive, and preserving the full directory structure in the
               filenames.
             </summary>
            
             <remarks>
             <para>
               If preserveDirHierarchy is true, any directory structure present in the
               filenames contained in the list is preserved in the archive.  On the other
               hand, if preserveDirHierarchy is false, any directory structure that may
               be present in the filenames contained in the list is "flattened" in the
               archive; Each file in the list is added to the archive in the specified
               top-level directory.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <param name="fileNames">
               The names of the files to add. Each string should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the file name.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <param name="preserveDirHierarchy">
               whether the entries in the zip archive will reflect the directory
               hierarchy that is present in the various filenames.  For example, if <paramref name="fileNames"/>
               includes two paths, \Animalia\Chordata\Mammalia\Info.txt and
               \Plantae\Magnoliophyta\Dicotyledon\Info.txt, then calling this method with
               <paramref name="preserveDirHierarchy"/> = <c>false</c> will result in an
               exception because of a duplicate entry name, while calling this method
               with <paramref name="preserveDirHierarchy"/> = <c>true</c> will result in the
               full direcory paths being included in the entries added to the ZipFile.
             </param>
             <seealso cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)"/>
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
               Adds or updates a set of files to the <c>ZipFile</c>, using the specified
               directory path in the archive.
             </summary>
            
             <remarks>
            
             <para>
               Any files that already exist in the archive are updated. Any files that
               don't yet exist in the archive are added.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The names of the files to add or update. Each string should refer to a
               file in the filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the file name.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)"/>
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateFile(System.String)">
             <summary>
               Adds or Updates a File in a Zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method adds a file to a zip archive, or, if the file already exists
               in the zip archive, this method Updates the content of that given filename
               in the zip archive.  The <c>UpdateFile</c> method might more accurately be
               called "AddOrUpdateFile".
             </para>
            
             <para>
               Upon success, there is no way for the application to learn whether the file
               was added versus updated.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <example>
            
               This example shows how to Update an existing entry in a zipfile. The first
               call to UpdateFile adds the file to the newly-created zip archive.  The
               second call to UpdateFile updates the content for that file in the zip
               archive.
            
             <code>
             using (ZipFile zip1 = new ZipFile())
             {
               // UpdateFile might more accurately be called "AddOrUpdateFile"
               zip1.UpdateFile("MyDocuments\\Readme.txt");
               zip1.UpdateFile("CustomerList.csv");
               zip1.Comment = "This zip archive has been created.";
               zip1.Save("Content.zip");
             }
            
             using (ZipFile zip2 = ZipFile.Read("Content.zip"))
             {
               zip2.UpdateFile("Updates\\Readme.txt");
               zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed.";
               zip2.Save();
             }
            
             </code>
             <code lang="VB">
               Using zip1 As New ZipFile
                   ' UpdateFile might more accurately be called "AddOrUpdateFile"
                   zip1.UpdateFile("MyDocuments\Readme.txt")
                   zip1.UpdateFile("CustomerList.csv")
                   zip1.Comment = "This zip archive has been created."
                   zip1.Save("Content.zip")
               End Using
            
               Using zip2 As ZipFile = ZipFile.Read("Content.zip")
                   zip2.UpdateFile("Updates\Readme.txt")
                   zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed."
                   zip2.Save
               End Using
             </code>
             </example>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <param name="fileName">
               The name of the file to add or update. It should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the File that was added or updated.
             </returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateFile(System.String,System.String)">
             <summary>
               Adds or Updates a File in a Zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method adds a file to a zip archive, or, if the file already exists
               in the zip archive, this method Updates the content of that given filename
               in the zip archive.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive.  The entry to be added or
               updated is found by using the specified directory path, combined with the
               basename of the specified filename.
             </para>
            
             <para>
               Upon success, there is no way for the application to learn if the file was
               added versus updated.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="fileName">
               The name of the file to add or update. It should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>fileName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>fileName</c>, if any.  Passing the empty string ("") will insert the
               item at the root path within the archive.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the File that was added or updated.
             </returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateDirectory(System.String)">
             <summary>
               Add or update a directory in a zip archive.
             </summary>
            
             <remarks>
               If the specified directory does not exist in the archive, then this method
               is equivalent to calling <c>AddDirectory()</c>.  If the specified
               directory already exists in the archive, then this method updates any
               existing entries, and adds any new entries. Any entries that are in the
               zip archive but not in the specified directory, are left alone.  In other
               words, the contents of the zip file will be a union of the previous
               contents and the new files.
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <param name="directoryName">
               The path to the directory to be added to the zip archive, or updated in
               the zip archive.
             </param>
            
             <returns>
             The <c>ZipEntry</c> corresponding to the Directory that was added or updated.
             </returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateDirectory(System.String,System.String)">
             <summary>
               Add or update a directory in the zip archive at the specified root
               directory in the archive.
             </summary>
            
             <remarks>
               If the specified directory does not exist in the archive, then this method
               is equivalent to calling <c>AddDirectory()</c>.  If the specified
               directory already exists in the archive, then this method updates any
               existing entries, and adds any new entries. Any entries that are in the
               zip archive but not in the specified directory, are left alone.  In other
               words, the contents of the zip file will be a union of the previous
               contents and the new files.
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="directoryName">
               The path to the directory to be added to the zip archive, or updated
               in the zip archive.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>directoryName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>directoryName</c>, if any.  Passing the empty string ("") will insert
               the item at the root path within the archive.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the Directory that was added or updated.
             </returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateItem(System.String)">
             <summary>
               Add or update a file or directory in the zip archive.
             </summary>
            
             <remarks>
             <para>
               This is useful when the application is not sure or does not care if the
               item to be added is a file or directory, and does not know or does not
               care if the item already exists in the <c>ZipFile</c>. Calling this method
               is equivalent to calling <c>RemoveEntry()</c> if an entry by the same name
               already exists, followed calling by <c>AddItem()</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateDirectory(System.String)"/>
            
             <param name="itemName">
              the path to the file or directory to be added or updated.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateItem(System.String,System.String)">
             <summary>
               Add or update a file or directory.
             </summary>
            
             <remarks>
             <para>
               This method is useful when the application is not sure or does not care if
               the item to be added is a file or directory, and does not know or does not
               care if the item already exists in the <c>ZipFile</c>. Calling this method
               is equivalent to calling <c>RemoveEntry()</c>, if an entry by that name
               exists, and then calling <c>AddItem()</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used for the item being added to the archive.  The
               entry or entries that are added or updated will use the specified
               <c>DirectoryPathInArchive</c>. Extracting the entry from the archive will
               result in a file stored in that directory path.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="itemName">
               The path for the File or Directory to be added or updated.
             </param>
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>itemName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>itemName</c>, if any.  Passing the empty string ("") will insert the
               item at the root path within the archive.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.String)">
             <summary>
               Adds a named entry into the zip archive, taking content for the entry
               from a string.
             </summary>
            
             <remarks>
               Calling this method creates an entry using the given fileName and
               directory path within the archive.  There is no need for a file by the
               given name to exist in the filesystem; the name is used within the zip
               archive only. The content for the entry is encoded using the default text
               encoding for the machine, or on Silverlight, using UTF-8.
             </remarks>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="entryName">
               The name, including any path, to use for the entry within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
             <example>
            
             This example shows how to add an entry to the zipfile, using a string as
             content for that entry.
            
             <code lang="C#">
             string Content = "This string will be the content of the Readme.txt file in the zip archive.";
             using (ZipFile zip1 = new ZipFile())
             {
               zip1.AddFile("MyDocuments\\Resume.doc", "files");
               zip1.AddEntry("Readme.txt", Content);
               zip1.Comment = "This zip file was created at " + System.DateTime.Now.ToString("G");
               zip1.Save("Content.zip");
             }
            
             </code>
             <code lang="VB">
             Public Sub Run()
               Dim Content As String = "This string will be the content of the Readme.txt file in the zip archive."
               Using zip1 As ZipFile = New ZipFile
                 zip1.AddEntry("Readme.txt", Content)
                 zip1.AddFile("MyDocuments\Resume.doc", "files")
                 zip1.Comment = ("This zip file was created at " &amp; DateTime.Now.ToString("G"))
                 zip1.Save("Content.zip")
               End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.String,System.Text.Encoding)">
             <summary>
               Adds a named entry into the zip archive, taking content for the entry
               from a string, and using the specified text encoding.
             </summary>
            
             <remarks>
            
             <para>
               Calling this method creates an entry using the given fileName and
               directory path within the archive.  There is no need for a file by the
               given name to exist in the filesystem; the name is used within the zip
               archive only.
             </para>
            
             <para>
               The content for the entry, a string value, is encoded using the given
               text encoding. A BOM (byte-order-mark) is emitted into the file, if the
               Encoding parameter is set for that.
             </para>
            
             <para>
               Most Encoding classes support a constructor that accepts a boolean,
               indicating whether to emit a BOM or not. For example see <see cref="M:System.Text.UTF8Encoding.#ctor(System.Boolean)"/>.
             </para>
            
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="encoding">
               The text encoding to use when encoding the string. Be aware: This is
               distinct from the text encoding used to encode the fileName, as specified
               in <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)">
             <summary>
               Create an entry in the <c>ZipFile</c> using the given <c>Stream</c>
               as input.  The entry will have the given filename.
             </summary>
            
             <remarks>
            
             <para>
               The application should provide an open, readable stream; in this case it
               will be read during the call to <see cref="M:Ionic.Zip.ZipFile.Save"/> or one of
               its overloads.
             </para>
            
             <para>
               The passed stream will be read from its current position. If
               necessary, callers should set the position in the stream before
               calling AddEntry(). This might be appropriate when using this method
               with a MemoryStream, for example.
             </para>
            
             <para>
               In cases where a large number of streams will be added to the
               <c>ZipFile</c>, the application may wish to avoid maintaining all of the
               streams open simultaneously.  To handle this situation, the application
               should use the <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.OpenDelegate,Ionic.Zip.CloseDelegate)"/>
               overload.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example adds a single entry to a <c>ZipFile</c> via a <c>Stream</c>.
             </para>
            
             <code lang="C#">
             String zipToCreate = "Content.zip";
             String fileNameInArchive = "Content-From-Stream.bin";
             using (System.IO.Stream streamToRead = MyStreamOpener())
             {
               using (ZipFile zip = new ZipFile())
               {
                 ZipEntry entry= zip.AddEntry(fileNameInArchive, streamToRead);
                 zip.AddFile("Readme.txt");
                 zip.Save(zipToCreate);  // the stream is read implicitly here
               }
             }
             </code>
            
             <code lang="VB">
             Dim zipToCreate As String = "Content.zip"
             Dim fileNameInArchive As String = "Content-From-Stream.bin"
             Using streamToRead as System.IO.Stream = MyStreamOpener()
               Using zip As ZipFile = New ZipFile()
                 Dim entry as ZipEntry = zip.AddEntry(fileNameInArchive, streamToRead)
                 zip.AddFile("Readme.txt")
                 zip.Save(zipToCreate)  '' the stream is read implicitly, here
               End Using
             End Using
             </code>
             </example>
            
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateEntry(System.String,System.IO.Stream)"/>
            
             <param name="entryName">
               The name, including any path, which is shown in the zip file for the added
               entry.
             </param>
             <param name="stream">
               The input stream from which to grab content for the file
             </param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.WriteDelegate)">
             <summary>
               Add a ZipEntry for which content is written directly by the application.
             </summary>
            
             <remarks>
             <para>
               When the application needs to write the zip entry data, use this
               method to add the ZipEntry. For example, in the case that the
               application wishes to write the XML representation of a DataSet into
               a ZipEntry, the application can use this method to do so.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             <para>
               About progress events: When using the WriteDelegate, DotNetZip does
               not issue any SaveProgress events with <c>EventType</c> = <see cref="F:Ionic.Zip.ZipProgressEventType.Saving_EntryBytesRead">
               Saving_EntryBytesRead</see>. (This is because it is the
               application's code that runs in WriteDelegate - there's no way for
               DotNetZip to know when to issue a EntryBytesRead event.)
               Applications that want to update a progress bar or similar status
               indicator should do so from within the WriteDelegate
               itself. DotNetZip will issue the other SaveProgress events,
               including <see cref="F:Ionic.Zip.ZipProgressEventType.Saving_Started">
               Saving_Started</see>,
               <see cref="F:Ionic.Zip.ZipProgressEventType.Saving_BeforeWriteEntry">
               Saving_BeforeWriteEntry</see>, and <see cref="F:Ionic.Zip.ZipProgressEventType.Saving_AfterWriteEntry">
               Saving_AfterWriteEntry</see>.
             </para>
            
             <para>
               Note: When you use PKZip encryption, it's normally necessary to
               compute the CRC of the content to be encrypted, before compressing or
               encrypting it. Therefore, when using PKZip encryption with a
               WriteDelegate, the WriteDelegate CAN BE called twice: once to compute
               the CRC, and the second time to potentially compress and
               encrypt. Surprising, but true. This is because PKWARE specified that
               the encryption initialization data depends on the CRC.
               If this happens, for each call of the delegate, your
               application must stream the same entry data in its entirety. If your
               application writes different data during the second call, it will
               result in a corrupt zip file.
             </para>
            
             <para>
               The double-read behavior happens with all types of entries, not only
               those that use WriteDelegate. It happens if you add an entry from a
               filesystem file, or using a string, or a stream, or an opener/closer
               pair. But in those cases, DotNetZip takes care of reading twice; in
               the case of the WriteDelegate, the application code gets invoked
               twice. Be aware.
             </para>
            
             <para>
               As you can imagine, this can cause performance problems for large
               streams, and it can lead to correctness problems when you use a
               <c>WriteDelegate</c>. This is a pretty big pitfall.  There are two
               ways to avoid it.  First, and most preferred: don't use PKZIP
               encryption.  If you use the WinZip AES encryption, this problem
               doesn't occur, because the encryption protocol doesn't require the CRC
               up front. Second: if you do choose to use PKZIP encryption, write out
               to a non-seekable stream (like standard output, or the
               Response.OutputStream in an ASP.NET application).  In this case,
               DotNetZip will use an alternative encryption protocol that does not
               rely on the CRC of the content.  This also implies setting bit 3 in
               the zip entry, which still presents problems for some zip tools.
             </para>
            
             <para>
               In the future I may modify DotNetZip to *always* use bit 3 when PKZIP
               encryption is in use.  This seems like a win overall, but there will
               be some work involved.  If you feel strongly about it, visit the
               DotNetZip forums and vote up <see href="http://dotnetzip.codeplex.com/workitem/13686">the Workitem
               tracking this issue</see>.
             </para>
            
             </remarks>
            
             <param name="entryName">the name of the entry to add</param>
             <param name="writer">the delegate which will write the entry content</param>
             <returns>the ZipEntry added</returns>
            
             <example>
            
               This example shows an application filling a DataSet, then saving the
               contents of that DataSet as XML, into a ZipEntry in a ZipFile, using an
               anonymous delegate in C#. The DataSet XML is never saved to a disk file.
            
             <code lang="C#">
             var c1= new System.Data.SqlClient.SqlConnection(connstring1);
             var da = new System.Data.SqlClient.SqlDataAdapter()
                 {
                     SelectCommand=  new System.Data.SqlClient.SqlCommand(strSelect, c1)
                 };
            
             DataSet ds1 = new DataSet();
             da.Fill(ds1, "Invoices");
            
             using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
             {
                 zip.AddEntry(zipEntryName, (name,stream) =&gt; ds1.WriteXml(stream) );
                 zip.Save(zipFileName);
             }
             </code>
             </example>
            
             <example>
            
             This example uses an anonymous method in C# as the WriteDelegate to provide
             the data for the ZipEntry. The example is a bit contrived - the
             <c>AddFile()</c> method is a simpler way to insert the contents of a file
             into an entry in a zip file. On the other hand, if there is some sort of
             processing or transformation of the file contents required before writing,
             the application could use the <c>WriteDelegate</c> to do it, in this way.
            
             <code lang="C#">
             using (var input = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ))
             {
                 using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                 {
                     zip.AddEntry(zipEntryName, (name,output) =&gt;
                         {
                             byte[] buffer = new byte[BufferSize];
                             int n;
                             while ((n = input.Read(buffer, 0, buffer.Length)) != 0)
                             {
                                 // could transform the data here...
                                 output.Write(buffer, 0, n);
                                 // could update a progress bar here
                             }
                         });
            
                     zip.Save(zipFileName);
                 }
             }
             </code>
             </example>
            
             <example>
            
             This example uses a named delegate in VB to write data for the given
             ZipEntry (VB9 does not have anonymous delegates). The example here is a bit
             contrived - a simpler way to add the contents of a file to a ZipEntry is to
             simply use the appropriate <c>AddFile()</c> method.  The key scenario for
             which the <c>WriteDelegate</c> makes sense is saving a DataSet, in XML
             format, to the zip file. The DataSet can write XML to a stream, and the
             WriteDelegate is the perfect place to write into the zip file.  There may be
             other data structures that can write to a stream, but cannot be read as a
             stream.  The <c>WriteDelegate</c> would be appropriate for those cases as
             well.
            
             <code lang="VB">
             Private Sub WriteEntry (ByVal name As String, ByVal output As Stream)
                 Using input As FileStream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                     Dim n As Integer = -1
                     Dim buffer As Byte() = New Byte(BufferSize){}
                     Do While n &lt;&gt; 0
                         n = input.Read(buffer, 0, buffer.Length)
                         output.Write(buffer, 0, n)
                     Loop
                 End Using
             End Sub
            
             Public Sub Run()
                 Using zip = New ZipFile
                     zip.AddEntry(zipEntryName, New WriteDelegate(AddressOf WriteEntry))
                     zip.Save(zipFileName)
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.OpenDelegate,Ionic.Zip.CloseDelegate)">
             <summary>
               Add an entry, for which the application will provide a stream,
               just-in-time.
             </summary>
            
             <remarks>
             <para>
               In cases where the application wishes to open the stream that holds
               the content for the ZipEntry, on a just-in-time basis, the application
               can use this method and provide delegates to open and close the
               stream.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses anonymous methods in C# to open and close the
               source stream for the content for a zip entry.  In a real
               application, the logic for the OpenDelegate would probably be more
               involved.
            
             <code lang="C#">
             using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
             {
                 zip.AddEntry(zipEntryName,
                              (name) =&gt;  File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ),
                              (name, stream) =&gt;  stream.Close()
                              );
            
                 zip.Save(zipFileName);
             }
             </code>
            
             </example>
            
             <example>
            
               This example uses delegates in VB.NET to open and close the
               the source stream for the content for a zip entry.  VB 9.0 lacks
               support for "Sub" lambda expressions, and so the CloseDelegate must
               be an actual, named Sub.
            
             <code lang="VB">
            
             Function MyStreamOpener(ByVal entryName As String) As Stream
                 '' This simply opens a file.  You probably want to do somethinig
                 '' more involved here: open a stream to read from a database,
                 '' open a stream on an HTTP connection, and so on.
                 Return File.OpenRead(entryName)
             End Function
            
             Sub MyStreamCloser(entryName As String, stream As Stream)
                 stream.Close()
             End Sub
            
             Public Sub Run()
                 Dim dirToZip As String = "fodder"
                 Dim zipFileToCreate As String = "Archive.zip"
                 Dim opener As OpenDelegate = AddressOf MyStreamOpener
                 Dim closer As CloseDelegate = AddressOf MyStreamCloser
                 Dim numFilestoAdd As Int32 = 4
                 Using zip As ZipFile = New ZipFile
                     Dim i As Integer
                     For i = 0 To numFilesToAdd - 1
                         zip.AddEntry(String.Format("content-{0:000}.txt"), opener, closer)
                     Next i
                     zip.Save(zipFileToCreate)
                 End Using
             End Sub
            
             </code>
             </example>
            
             <param name="entryName">the name of the entry to add</param>
             <param name="opener">
              the delegate that will be invoked to open the stream
             </param>
             <param name="closer">
              the delegate that will be invoked to close the stream
             </param>
             <returns>the ZipEntry added</returns>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateEntry(System.String,System.String)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given
               string as content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
            
             <para>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for
               the given file name and directory path, if it exists, and then calling
               <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.String)"/>.  See the documentation for
               that method for further explanation. The string content is encoded
               using the default encoding for the machine, or on Silverlight, using
               UTF-8. This encoding is distinct from the encoding used for the
               filename itself.  See <see cref="P:Ionic.Zip.ZipFile.AlternateEncoding"/>.
             </para>
            
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateEntry(System.String,System.String,System.Text.Encoding)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given string as
               content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.String,System.Text.Encoding)"/>.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="encoding">
               The text encoding to use when encoding the string. Be aware: This is
               distinct from the text encoding used to encode the filename. See <see cref="P:Ionic.Zip.ZipFile.AlternateEncoding"/>.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateEntry(System.String,Ionic.Zip.WriteDelegate)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given delegate
               as the source for content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.WriteDelegate)"/>.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="writer">the delegate which will write the entry content.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateEntry(System.String,Ionic.Zip.OpenDelegate,Ionic.Zip.CloseDelegate)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given delegates
               to open and close the stream that provides the content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.OpenDelegate,Ionic.Zip.CloseDelegate)"/>.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="opener">
              the delegate that will be invoked to open the stream
             </param>
             <param name="closer">
              the delegate that will be invoked to close the stream
             </param>
            
             <returns>The <c>ZipEntry</c> added or updated.</returns>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateEntry(System.String,System.IO.Stream)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given stream as
               input, and the given filename and given directory Path.
             </summary>
            
             <remarks>
             <para>
               Calling the method is equivalent to calling <c>RemoveEntry()</c> if an
               entry by the same name already exists, and then calling <c>AddEntry()</c>
               with the given <c>fileName</c> and stream.
             </para>
            
             <para>
               The stream must be open and readable during the call to
               <c>ZipFile.Save</c>.  You can dispense the stream on a just-in-time basis
               using the <see cref="P:Ionic.Zip.ZipEntry.InputStream"/> property. Check the
               documentation of that property for more information.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)"/>
             <seealso cref="P:Ionic.Zip.ZipEntry.InputStream"/>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="stream">The input stream from which to read file data.</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.Byte[])">
             <summary>
               Add an entry into the zip archive using the given filename and
               directory path within the archive, and the given content for the
               file. No file is created in the filesystem.
             </summary>
            
             <param name="byteContent">The data to use for the entry.</param>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateEntry(System.String,System.Byte[])">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given byte
               array as content for the entry.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c>
               for the given filename and directory path, if it exists, and then
               calling <see cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.Byte[])"/>.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="byteContent">The content to use for the <c>ZipEntry</c>.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddDirectory(System.String)">
             <summary>
               Adds the contents of a filesystem directory to a Zip file archive.
             </summary>
            
             <remarks>
            
             <para>
               The name of the directory may be a relative path or a fully-qualified
               path. Any files within the named directory are added to the archive.  Any
               subdirectories within the named directory are also added to the archive,
               recursively.
             </para>
            
             <para>
               Top-level entries in the named directory will appear as top-level entries
               in the zip archive.  Entries in subdirectories in the named directory will
               result in entries in subdirectories in the zip archive.
             </para>
            
             <para>
               If you want the entries to appear in a containing directory in the zip
               archive itself, then you should call the AddDirectory() overload that
               allows you to explicitly specify a directory path for use in the archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
            
             <overloads>This method has 2 overloads.</overloads>
            
             <param name="directoryName">The name of the directory to add.</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddDirectory(System.String,System.String)">
             <summary>
               Adds the contents of a filesystem directory to a Zip file archive,
               overriding the path to be used for entries in the archive.
             </summary>
            
             <remarks>
             <para>
               The name of the directory may be a relative path or a fully-qualified
               path. The add operation is recursive, so that any files or subdirectories
               within the name directory are also added to the archive.
             </para>
            
             <para>
               Top-level entries in the named directory will appear as top-level entries
               in the zip archive.  Entries in subdirectories in the named directory will
               result in entries in subdirectories in the zip archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:Ionic.Zip.ZipFile.Password"/>, <see cref="P:Ionic.Zip.ZipFile.SetCompression"/>, <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this code, calling the ZipUp() method with a value of "c:\reports" for
               the directory parameter will result in a zip file structure in which all
               entries are contained in a toplevel "reports" directory.
             </para>
            
             <code lang="C#">
             public void ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile())
               {
                 zip.AddDirectory(directory, System.IO.Path.GetFileName(directory));
                 zip.Save(targetZip);
               }
             }
             </code>
             </example>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="directoryName">The name of the directory to add.</param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               DirectoryName.  This path may, or may not, correspond to a real directory
               in the current filesystem.  If the zip is later extracted, this is the
               path used for the extracted file or directory.  Passing <c>null</c>
               (<c>Nothing</c> in VB) or the empty string ("") will insert the items at
               the root path within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddDirectoryByName(System.String)">
             <summary>
               Creates a directory in the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               Use this when you want to create a directory in the archive but there is
               no corresponding filesystem representation for that directory.
             </para>
            
             <para>
               You will probably not need to do this in your code. One of the only times
               you will want to do this is if you want an empty directory in the zip
               archive.  The reason: if you add a file to a zip archive that is stored
               within a multi-level directory, all of the directory tree is implicitly
               created in the zip archive.
             </para>
            
             </remarks>
            
             <param name="directoryNameInArchive">
               The name of the directory to create in the archive.
             </param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.CheckZip(System.String)">
             <summary>
               Checks a zip file to see if its directory is consistent.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory within a zip file can get out
               of synch with the entries in the zip file.  This method checks the
               given zip file and returns true if this has occurred.
             </para>
            
             <para> This method may take a long time to run for large zip files.  </para>
            
             <para>
               This method is not supported in the Reduced or Compact Framework
               versions of DotNetZip.
             </para>
            
             <para>
               Developers using COM can use the <see cref="M:Ionic.Zip.ComHelper.CheckZip(System.String)">ComHelper.CheckZip(String)</see>
               method.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
            
             <seealso cref="M:Ionic.Zip.ZipFile.FixZipDirectory(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)"/>
        </member>
        <member name="M:Ionic.Zip.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)">
             <summary>
               Checks a zip file to see if its directory is consistent,
               and optionally fixes the directory if necessary.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory within a zip file can get out of
               synch with the entries in the zip file.  This method checks the given
               zip file, and returns true if this has occurred. It also optionally
               fixes the zipfile, saving the fixed copy in <em>Name</em>_Fixed.zip.
             </para>
            
             <para>
               This method may take a long time to run for large zip files.  It
               will take even longer if the file actually needs to be fixed, and if
               <c>fixIfNecessary</c> is true.
             </para>
            
             <para>
               This method is not supported in the Reduced or Compact
               Framework versions of DotNetZip.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to check.</param>
            
             <param name="fixIfNecessary">If true, the method will fix the zip file if
                 necessary.</param>
            
             <param name="writer">
             a TextWriter in which messages generated while checking will be written.
             </param>
            
             <returns>true if the named zip is OK; false if the file needs to be fixed.</returns>
            
             <seealso cref="M:Ionic.Zip.ZipFile.CheckZip(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.FixZipDirectory(System.String)"/>
        </member>
        <member name="M:Ionic.Zip.ZipFile.FixZipDirectory(System.String)">
             <summary>
               Rewrite the directory within a zipfile.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory in a zip file can get out of
               synch with the entries in the zip file.  This method attempts to fix
               the zip file if this has occurred.
             </para>
            
             <para> This can take a long time for large zip files. </para>
            
             <para> This won't work if the zip file uses a non-standard
             code page - neither IBM437 nor UTF-8. </para>
            
             <para>
               This method is not supported in the Reduced or Compact Framework
               versions of DotNetZip.
             </para>
            
             <para>
               Developers using COM can use the <see cref="M:Ionic.Zip.ComHelper.FixZipDirectory(System.String)">ComHelper.FixZipDirectory(String)</see>
               method.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to fix.</param>
            
             <seealso cref="M:Ionic.Zip.ZipFile.CheckZip(System.String)"/>
             <seealso cref="M:Ionic.Zip.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)"/>
        </member>
        <member name="M:Ionic.Zip.ZipFile.CheckZipPassword(System.String,System.String)">
             <summary>
               Verify the password on a zip file.
             </summary>
            
             <remarks>
               <para>
                 Keep in mind that passwords in zipfiles are applied to
                 zip entries, not to the entire zip file. So testing a
                 zipfile for a particular password doesn't work in the
                 general case. On the other hand, it's often the case
                 that a single password will be used on all entries in a
                 zip file. This method works for that case.
               </para>
               <para>
                 There is no way to check a password without doing the
                 decryption. So this code decrypts and extracts the given
                 zipfile into <see cref="F:System.IO.Stream.Null"/>
               </para>
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to fix.</param>
            
             <param name="password">The password to check.</param>
            
             <returns>a bool indicating whether the password matches.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.ContainsEntry(System.String)">
             <summary>
               Returns true if an entry by the given name exists in the ZipFile.
             </summary>
            
             <param name='name'>the name of the entry to find</param>
             <returns>true if an entry with the given name exists; otherwise false.
             </returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.#ctor(System.String)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified filename.
             </summary>
            
             <remarks>
             <para>
               Applications can use this constructor to create a new ZipFile for writing,
               or to slurp in an existing zip archive for read and update purposes.
             </para>
            
             <para>
               To create a new zip archive, an application can call this constructor,
               passing the name of a file that does not exist.  The name may be a fully
               qualified path. Then the application can add directories or files to the
               <c>ZipFile</c> via <c>AddDirectory()</c>, <c>AddFile()</c>, <c>AddItem()</c>
               and then write the zip archive to the disk by calling <c>Save()</c>. The
               zip file is not actually opened and written to the disk until the
               application calls <c>ZipFile.Save()</c>.  At that point the new zip file
               with the given name is created.
             </para>
            
             <para>
               If you won't know the name of the <c>Zipfile</c> until the time you call
               <c>ZipFile.Save()</c>, or if you plan to save to a stream (which has no
               name), then you should use the no-argument constructor.
             </para>
            
             <para>
               The application can also call this constructor to read an existing zip
               archive.  passing the name of a valid zip file that does exist. But, it's
               better form to use the static <see cref="M:Ionic.Zip.ZipFile.Read(System.String)"/> method,
               passing the name of the zip file, because using <c>ZipFile.Read()</c> in
               your code communicates very clearly what you are doing.  In either case,
               the file is then read into the <c>ZipFile</c> instance.  The app can then
               enumerate the entries or can modify the zip file, for example adding
               entries, removing entries, changing comments, and so on.
             </para>
            
             <para>
               One advantage to this parameterized constructor: it allows applications to
               use the same code to add items to a zip archive, regardless of whether the
               zip file exists.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             <para>
               By the way, since DotNetZip is so easy to use, don't you think <see href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">you should
               donate $5 or $10</see>?
             </para>
            
             </remarks>
            
             <exception cref="T:Ionic.Zip.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <example>
             This example shows how to create a zipfile, and add a few files into it.
             <code>
             String ZipFileToCreate = "archive1.zip";
             String DirectoryToZip  = "c:\\reports";
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save(ZipFileToCreate);
             }
             </code>
            
             <code lang="VB">
             Dim ZipFileToCreate As String = "archive1.zip"
             Dim DirectoryToZip As String = "c:\reports"
             Using zip As ZipFile = New ZipFile()
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save(ZipFileToCreate)
             End Using
             </code>
             </example>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.#ctor(System.String,System.Text.Encoding)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, and the specified Encoding.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:Ionic.Zip.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               The Encoding is used as the default alternate encoding for entries with
               filenames or comments that cannot be encoded with the IBM437 code page.
               This is equivalent to setting the <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/> property on the <c>ZipFile</c>
               instance after construction.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:Ionic.Zip.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="encoding">The Encoding is used as the default alternate
             encoding for entries with filenames or comments that cannot be encoded
             with the IBM437 code page. </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.#ctor">
             <summary>
               Create a zip file, without specifying a target filename or stream to save to.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:Ionic.Zip.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               After instantiating with this constructor and adding entries to the
               archive, the application should call <see cref="M:Ionic.Zip.ZipFile.Save(System.String)"/> or
               <see cref="M:Ionic.Zip.ZipFile.Save(System.IO.Stream)"/> to save to a file or a
               stream, respectively.  The application can also set the <see cref="P:Ionic.Zip.ZipFile.Name"/>
               property and then call the no-argument <see cref="M:Ionic.Zip.ZipFile.Save"/> method.  (This
               is the preferred approach for applications that use the library through
               COM interop.)  If you call the no-argument <see cref="M:Ionic.Zip.ZipFile.Save"/> method
               without having set the <c>Name</c> of the <c>ZipFile</c>, either through
               the parameterized constructor or through the explicit property , the
               Save() will throw, because there is no place to save the file.  </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               have multiple threads that each use a distinct <c>ZipFile</c> instance, or
               you can synchronize multi-thread access to a single instance.  </para>
            
             </remarks>
            
             <example>
             This example creates a Zip archive called Backup.zip, containing all the files
             in the directory DirectoryToZip. Files within subdirectories are not zipped up.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save("Backup.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save("Backup.zip")
             End Using
             </code>
             </example>
        </member>
        <member name="M:Ionic.Zip.ZipFile.#ctor(System.Text.Encoding)">
             <summary>
               Create a zip file, specifying a text Encoding, but without specifying a
               target filename or stream to save to.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:Ionic.Zip.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             </remarks>
            
             <param name="encoding">
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.#ctor(System.String,System.IO.TextWriter)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, and the specified status message writer.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:Ionic.Zip.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               This version of the constructor allows the caller to pass in a TextWriter,
               to which verbose messages will be written during extraction or creation of
               the zip archive.  A console application may wish to pass
               System.Console.Out to get messages on the Console. A graphical or headless
               application may wish to capture the messages in a different
               <c>TextWriter</c>, for example, a <c>StringWriter</c>, and then display
               the messages in a TextBox, or generate an audit log of ZipFile operations.
             </para>
            
             <para>
               To encrypt the data for the files added to the <c>ZipFile</c> instance,
               set the Password property after creating the <c>ZipFile</c> instance.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:Ionic.Zip.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <example>
             <code>
             using (ZipFile zip = new ZipFile("Backup.zip", Console.Out))
             {
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               // Status messages will be written to Console.Out
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames);
               zip.Save();
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile("Backup.zip", Console.Out)
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 ' Status messages will be written to Console.Out
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames)
                 zip.Save()
             End Using
             </code>
             </example>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing
             verbose status messages.</param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.#ctor(System.String,System.IO.TextWriter,System.Text.Encoding)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, the specified status message writer, and the specified Encoding.
             </summary>
            
             <remarks>
             <para>
               This constructor works like the <see cref="M:Ionic.Zip.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument.</see> See that
               reference for detail on what this constructor does.
             </para>
            
             <para>
               This version of the constructor allows the caller to pass in a
               <c>TextWriter</c>, and an Encoding.  The <c>TextWriter</c> will collect
               verbose messages that are generated by the library during extraction or
               creation of the zip archive.  A console application may wish to pass
               <c>System.Console.Out</c> to get messages on the Console. A graphical or
               headless application may wish to capture the messages in a different
               <c>TextWriter</c>, for example, a <c>StringWriter</c>, and then display
               the messages in a <c>TextBox</c>, or generate an audit log of
               <c>ZipFile</c> operations.
             </para>
            
             <para>
               The <c>Encoding</c> is used as the default alternate encoding for entries
               with filenames or comments that cannot be encoded with the IBM437 code
               page.  This is a equivalent to setting the <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/> property on the <c>ZipFile</c>
               instance after construction.
             </para>
            
             <para>
               To encrypt the data for the files added to the <c>ZipFile</c> instance,
               set the <c>Password</c> property after creating the <c>ZipFile</c>
               instance.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:Ionic.Zip.ZipException">
             Thrown if <c>fileName</c> refers to an existing file that is not a valid zip file.
             </exception>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing verbose
             status messages.</param>
             <param name="encoding">
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.Initialize(System.String)">
             <summary>
               Initialize a <c>ZipFile</c> instance by reading in a zip file.
             </summary>
            
             <remarks>
            
             <para>
               This method is primarily useful from COM Automation environments, when
               reading or extracting zip files. In COM, it is not possible to invoke
               parameterized constructors for a class. A COM Automation application can
               update a zip file by using the <see cref="M:Ionic.Zip.ZipFile.#ctor">default (no argument)
               constructor</see>, then calling <c>Initialize()</c> to read the contents
               of an on-disk zip archive into the <c>ZipFile</c> instance.
             </para>
            
             <para>
               .NET applications are encouraged to use the <c>ZipFile.Read()</c> methods
               for better clarity.
             </para>
            
             </remarks>
             <param name="fileName">the name of the existing zip file to read in.</param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.RemoveEntry(Ionic.Zip.ZipEntry)">
             <summary>
               Removes the given <c>ZipEntry</c> from the zip archive.
             </summary>
            
             <remarks>
             <para>
               After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to
               make the changes permanent.
             </para>
             </remarks>
            
             <exception cref="T:System.ArgumentException">
               Thrown if the specified <c>ZipEntry</c> does not exist in the <c>ZipFile</c>.
             </exception>
            
             <example>
               In this example, all entries in the zip archive dating from before
               December 31st, 2007, are removed from the archive.  This is actually much
               easier if you use the RemoveSelectedEntries method.  But I needed an
               example for RemoveEntry, so here it is.
             <code>
             String ZipFileToRead = "ArchiveToModify.zip";
             System.DateTime Threshold = new System.DateTime(2007,12,31);
             using (ZipFile zip = ZipFile.Read(ZipFileToRead))
             {
               var EntriesToRemove = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                 {
                   // We cannot remove the entry from the list, within the context of
                   // an enumeration of said list.
                   // So we add the doomed entry to a list to be removed later.
                   EntriesToRemove.Add(e);
                 }
               }
            
               // actually remove the doomed entries.
               foreach (ZipEntry zombie in EntriesToRemove)
                 zip.RemoveEntry(zombie);
            
               zip.Comment= String.Format("This zip archive was updated at {0}.",
                                          System.DateTime.Now.ToString("G"));
            
               // save with a different name
               zip.Save("Archive-Updated.zip");
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToRead As String = "ArchiveToModify.zip"
               Dim Threshold As New DateTime(2007, 12, 31)
               Using zip As ZipFile = ZipFile.Read(ZipFileToRead)
                   Dim EntriesToRemove As New System.Collections.Generic.List(Of ZipEntry)
                   Dim e As ZipEntry
                   For Each e In zip
                       If (e.LastModified &lt; Threshold) Then
                           ' We cannot remove the entry from the list, within the context of
                           ' an enumeration of said list.
                           ' So we add the doomed entry to a list to be removed later.
                           EntriesToRemove.Add(e)
                       End If
                   Next
            
                   ' actually remove the doomed entries.
                   Dim zombie As ZipEntry
                   For Each zombie In EntriesToRemove
                       zip.RemoveEntry(zombie)
                   Next
                   zip.Comment = String.Format("This zip archive was updated at {0}.", DateTime.Now.ToString("G"))
                   'save as a different name
                   zip.Save("Archive-Updated.zip")
               End Using
             </code>
             </example>
            
             <param name="entry">
             The <c>ZipEntry</c> to remove from the zip.
             </param>
            
             <seealso cref="M:Ionic.Zip.ZipFile.RemoveSelectedEntries(System.String)"/>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.RemoveEntry(System.String)">
             <summary>
             Removes the <c>ZipEntry</c> with the given filename from the zip archive.
             </summary>
            
             <remarks>
             <para>
               After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to
               make the changes permanent.
             </para>
            
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">
               Thrown if the <c>ZipFile</c> is not updatable.
             </exception>
            
             <exception cref="T:System.ArgumentException">
               Thrown if a <c>ZipEntry</c> with the specified filename does not exist in
               the <c>ZipFile</c>.
             </exception>
            
             <example>
            
               This example shows one way to remove an entry with a given filename from
               an existing zip archive.
            
             <code>
             String zipFileToRead= "PackedDocuments.zip";
             string candidate = "DatedMaterial.xps";
             using (ZipFile zip = ZipFile.Read(zipFileToRead))
             {
               if (zip.EntryFilenames.Contains(candidate))
               {
                 zip.RemoveEntry(candidate);
                 zip.Comment= String.Format("The file '{0}' has been removed from this archive.",
                                            Candidate);
                 zip.Save();
               }
             }
             </code>
             <code lang="VB">
               Dim zipFileToRead As String = "PackedDocuments.zip"
               Dim candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile = ZipFile.Read(zipFileToRead)
                   If zip.EntryFilenames.Contains(candidate) Then
                       zip.RemoveEntry(candidate)
                       zip.Comment = String.Format("The file '{0}' has been removed from this archive.", Candidate)
                       zip.Save
                   End If
               End Using
             </code>
             </example>
            
             <param name="fileName">
             The name of the file, including any directory path, to remove from the zip.
             The filename match is not case-sensitive by default; you can use the
             <c>CaseSensitiveRetrieval</c> property to change this behavior. The
             pathname can use forward-slashes or backward slashes.
             </param>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.Dispose">
             <summary>
               Closes the read and write streams associated
               to the <c>ZipFile</c>, if necessary.
             </summary>
            
             <remarks>
               The Dispose() method is generally employed implicitly, via a <c>using(..) {..}</c>
               statement. (<c>Using...End Using</c> in VB) If you do not employ a using
               statement, insure that your application calls Dispose() explicitly.  For
               example, in a Powershell application, or an application that uses the COM
               interop interface, you must call Dispose() explicitly.
             </remarks>
            
             <example>
             This example extracts an entry selected by name, from the Zip file to the
             Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               foreach (ZipEntry e in zip)
               {
                 if (WantThisEntry(e.FileName))
                   zip.Extract(e.FileName, Console.OpenStandardOutput());
               }
             } // Dispose() is called implicitly here.
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(zipfile)
                 Dim e As ZipEntry
                 For Each e In zip
                   If WantThisEntry(e.FileName) Then
                       zip.Extract(e.FileName, Console.OpenStandardOutput())
                   End If
                 Next
             End Using ' Dispose is implicity called here
             </code>
             </example>
        </member>
        <member name="M:Ionic.Zip.ZipFile.Dispose(System.Boolean)">
             <summary>
               Disposes any managed resources, if the flag is set, then marks the
               instance disposed.  This method is typically not called explicitly from
               application code.
             </summary>
            
             <remarks>
               Applications should call <see cref="M:Ionic.Zip.ZipFile.Dispose">the no-arg Dispose method</see>.
             </remarks>
            
             <param name="disposeManagedResources">
               indicates whether the method should dispose streams or not.
             </param>
        </member>
        <member name="F:Ionic.Zip.ZipFile.BufferSizeDefault">
            <summary>
              Default size of the buffer used for IO.
            </summary>
        </member>
        <member name="M:Ionic.Zip.ZipFile.ExtractAll(System.String)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the
             filesystem.  The path can be relative or fully-qualified.
             </summary>
            
             <remarks>
             <para>
               This method will extract all entries in the <c>ZipFile</c> to the
               specified path.
             </para>
            
             <para>
               If an extraction of a file from the zip archive would overwrite an
               existing file in the filesystem, the action taken is dictated by the
               ExtractExistingFile property, which overrides any setting you may have
               made on individual ZipEntry instances.  By default, if you have not
               set that property on the <c>ZipFile</c> instance, the entry will not
               be extracted, the existing file will not be overwritten and an
               exception will be thrown. To change this, set the property, or use the
               <see cref="M:Ionic.Zip.ZipFile.ExtractAll(System.String,Ionic.Zip.ExtractExistingFileAction)"/> overload that allows you to
               specify an ExtractExistingFileAction parameter.
             </para>
            
             <para>
               The action to take when an extract would overwrite an existing file
               applies to all entries.  If you want to set this on a per-entry basis,
               then you must use one of the <see cref="M:Ionic.Zip.ZipEntry.Extract">ZipEntry.Extract</see> methods.
             </para>
            
             <para>
               This method will send verbose output messages to the <see cref="P:Ionic.Zip.ZipFile.StatusMessageTextWriter"/>, if it is set on the <c>ZipFile</c>
               instance.
             </para>
            
             <para>
             You may wish to take advantage of the <c>ExtractProgress</c> event.
             </para>
            
             <para>
               About timestamps: When extracting a file entry from a zip archive, the
               extracted file gets the last modified time of the entry as stored in
               the archive. The archive may also store extended file timestamp
               information, including last accessed and created times. If these are
               present in the <c>ZipEntry</c>, then the extracted file will also get
               these times.
             </para>
            
             <para>
               A Directory entry is somewhat different. It will get the times as
               described for a file entry, but, if there are file entries in the zip
               archive that, when extracted, appear in the just-created directory,
               then when those file entries are extracted, the last modified and last
               accessed times of the directory will change, as a side effect.  The
               result is that after an extraction of a directory and a number of
               files within the directory, the last modified and last accessed
               timestamps on the directory will reflect the time that the last file
               was extracted into the directory, rather than the time stored in the
               zip archive for the directory.
             </para>
            
             <para>
               To compensate, when extracting an archive with <c>ExtractAll</c>,
               DotNetZip will extract all the file and directory entries as described
               above, but it will then make a second pass on the directories, and
               reset the times on the directories to reflect what is stored in the
               zip archive.
             </para>
            
             <para>
               This compensation is performed only within the context of an
               <c>ExtractAll</c>. If you call <c>ZipEntry.Extract</c> on a directory
               entry, the timestamps on directory in the filesystem will reflect the
               times stored in the zip.  If you then call <c>ZipEntry.Extract</c> on
               a file entry, which is extracted into the directory, the timestamps on
               the directory will be updated to the current time.
             </para>
             </remarks>
            
             <example>
               This example extracts all the entries in a zip archive file, to the
               specified target directory.  The extraction will overwrite any
               existing files silently.
            
             <code>
             String TargetDirectory= "unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
                 zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently;
                 zip.ExtractAll(TargetDirectory);
             }
             </code>
            
             <code lang="VB">
             Dim TargetDirectory As String = "unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently
                 zip.ExtractAll(TargetDirectory)
             End Using
             </code>
             </example>
            
             <seealso cref="E:Ionic.Zip.ZipFile.ExtractProgress"/>
             <seealso cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/>
            
             <param name="path">
               The path to which the contents of the zipfile will be extracted.
               The path can be relative or fully-qualified.
             </param>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.ExtractAll(System.String,Ionic.Zip.ExtractExistingFileAction)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the
             filesystem, using the specified behavior when extraction would overwrite an
             existing file.
             </summary>
            
             <remarks>
            
             <para>
             This method will extract all entries in the <c>ZipFile</c> to the specified
             path.  For an extraction that would overwrite an existing file, the behavior
             is dictated by <paramref name="extractExistingFile"/>, which overrides any
             setting you may have made on individual ZipEntry instances.
             </para>
            
             <para>
             The action to take when an extract would overwrite an existing file
             applies to all entries.  If you want to set this on a per-entry basis,
             then you must use <see cref="M:Ionic.Zip.ZipEntry.Extract(System.String,Ionic.Zip.ExtractExistingFileAction)"/> or one of the similar methods.
             </para>
            
             <para>
             Calling this method is equivalent to setting the <see cref="P:Ionic.Zip.ZipFile.ExtractExistingFile"/> property and then calling <see cref="M:Ionic.Zip.ZipFile.ExtractAll(System.String)"/>.
             </para>
            
             <para>
             This method will send verbose output messages to the
             <see cref="P:Ionic.Zip.ZipFile.StatusMessageTextWriter"/>, if it is set on the <c>ZipFile</c> instance.
             </para>
             </remarks>
            
             <example>
             This example extracts all the entries in a zip archive file, to the
             specified target directory.  It does not overwrite any existing files.
             <code>
             String TargetDirectory= "c:\\unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
               zip.ExtractAll(TargetDirectory, ExtractExistingFileAction.DontOverwrite);
             }
             </code>
            
             <code lang="VB">
             Dim TargetDirectory As String = "c:\unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractAll(TargetDirectory, ExtractExistingFileAction.DontOverwrite)
             End Using
             </code>
             </example>
            
             <param name="path">
             The path to which the contents of the zipfile will be extracted.
             The path can be relative or fully-qualified.
             </param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
             <seealso cref="M:Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String,Ionic.Zip.ExtractExistingFileAction)"/>
        </member>
        <member name="M:Ionic.Zip.ZipFile.Read(System.String)">
             <summary>
             Reads a zip file archive and returns the instance.
             </summary>
            
             <remarks>
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is the
             <c>IBM437</c> codepage.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if the <c>ZipFile</c> cannot be read. The implementation of this method
             relies on <c>System.IO.File.OpenRead</c>, which can throw a variety of exceptions,
             including specific exceptions if a file is not found, an unauthorized access
             exception, exceptions for poorly formatted filenames, and so on.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to open.  This can be a fully-qualified or relative
             pathname.
             </param>
            
             <seealso cref="M:Ionic.Zip.ZipFile.Read(System.String,Ionic.Zip.ReadOptions)"/>.
            
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.Read(System.String,Ionic.Zip.ReadOptions)">
             <summary>
               Reads a zip file archive from the named filesystem file using the
               specified options.
             </summary>
            
             <remarks>
             <para>
               This version of the <c>Read()</c> method allows the caller to pass
               in a <c>TextWriter</c> an <c>Encoding</c>, via an instance of the
               <c>ReadOptions</c> class.  The <c>ZipFile</c> is read in using the
               specified encoding for entries where UTF-8 encoding is not
               explicitly specified.
             </para>
             </remarks>
            
             <example>
            
             <para>
               This example shows how to read a zip file using the Big-5 Chinese
               code page (950), and extract each entry in the zip file, while
               sending status messages out to the Console.
             </para>
            
             <para>
               For this code to work as intended, the zipfile must have been
               created using the big5 code page (CP950). This is typical, for
               example, when using WinRar on a machine with CP950 set as the
               default code page.  In that case, the names of entries within the
               Zip archive will be stored in that code page, and reading the zip
               archive must be done using that code page.  If the application did
               not use the correct code page in ZipFile.Read(), then names of
               entries within the zip archive would not be correctly retrieved.
             </para>
            
             <code lang="C#">
             string zipToExtract = "MyArchive.zip";
             string extractDirectory = "extract";
             var options = new ReadOptions
             {
               StatusMessageWriter = System.Console.Out,
               Encoding = System.Text.Encoding.GetEncoding(950)
             };
             using (ZipFile zip = ZipFile.Read(zipToExtract, options))
             {
               foreach (ZipEntry e in zip)
               {
                  e.Extract(extractDirectory);
               }
             }
             </code>
            
            
             <code lang="VB">
             Dim zipToExtract as String = "MyArchive.zip"
             Dim extractDirectory as String = "extract"
             Dim options as New ReadOptions
             options.Encoding = System.Text.Encoding.GetEncoding(950)
             options.StatusMessageWriter = System.Console.Out
             Using zip As ZipFile = ZipFile.Read(zipToExtract, options)
                 Dim e As ZipEntry
                 For Each e In zip
                  e.Extract(extractDirectory)
                 Next
             End Using
             </code>
             </example>
            
            
             <example>
            
             <para>
               This example shows how to read a zip file using the default
               code page, to remove entries that have a modified date before a given threshold,
               sending status messages out to a <c>StringWriter</c>.
             </para>
            
             <code lang="C#">
             var options = new ReadOptions
             {
               StatusMessageWriter = new System.IO.StringWriter()
             };
             using (ZipFile zip =  ZipFile.Read("PackedDocuments.zip", options))
             {
               var Threshold = new DateTime(2007,7,4);
               // We cannot remove the entry from the list, within the context of
               // an enumeration of said list.
               // So we add the doomed entry to a list to be removed later.
               // pass 1: mark the entries for removal
               var MarkedEntries = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                   MarkedEntries.Add(e);
               }
               // pass 2: actually remove the entry.
               foreach (ZipEntry zombie in MarkedEntries)
                  zip.RemoveEntry(zombie);
               zip.Comment = "This archive has been updated.";
               zip.Save();
             }
             // can now use contents of sw, eg store in an audit log
             </code>
            
             <code lang="VB">
             Dim options as New ReadOptions
             options.StatusMessageWriter = New System.IO.StringWriter
             Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip", options)
                 Dim Threshold As New DateTime(2007, 7, 4)
                 ' We cannot remove the entry from the list, within the context of
                 ' an enumeration of said list.
                 ' So we add the doomed entry to a list to be removed later.
                 ' pass 1: mark the entries for removal
                 Dim MarkedEntries As New System.Collections.Generic.List(Of ZipEntry)
                 Dim e As ZipEntry
                 For Each e In zip
                     If (e.LastModified &lt; Threshold) Then
                         MarkedEntries.Add(e)
                     End If
                 Next
                 ' pass 2: actually remove the entry.
                 Dim zombie As ZipEntry
                 For Each zombie In MarkedEntries
                     zip.RemoveEntry(zombie)
                 Next
                 zip.Comment = "This archive has been updated."
                 zip.Save
             End Using
             ' can now use contents of sw, eg store in an audit log
             </code>
             </example>
            
             <exception cref="T:System.Exception">
               Thrown if the zipfile cannot be read. The implementation of
               this method relies on <c>System.IO.File.OpenRead</c>, which
               can throw a variety of exceptions, including specific
               exceptions if a file is not found, an unauthorized access
               exception, exceptions for poorly formatted filenames, and so
               on.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to open.
             This can be a fully-qualified or relative pathname.
             </param>
            
             <param name="options">
             The set of options to use when reading the zip file.
             </param>
            
             <returns>The ZipFile instance read from the zip archive.</returns>
            
             <seealso cref="M:Ionic.Zip.ZipFile.Read(System.IO.Stream,Ionic.Zip.ReadOptions)"/>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.Read(System.String,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{Ionic.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip file archive using the specified text encoding,  the specified
             TextWriter for status messages, and the specified ReadProgress event handler,
             and returns the instance.
             </summary>
            
             <param name="fileName">
             The name of the zip archive to open.
             This can be a fully-qualified or relative pathname.
             </param>
            
             <param name="readProgress">
             An event handler for Read operations.
             </param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to use for writing verbose status messages
             during operations on the zip archive.  A console application may wish to
             pass <c>System.Console.Out</c> to get messages on the Console. A graphical
             or headless application may wish to capture the messages in a different
             <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
             </param>
            
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </param>
            
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.Read(System.IO.Stream)">
             <summary>
               Reads a zip archive from a stream.
             </summary>
            
             <remarks>
            
             <para>
               When reading from a file, it's probably easier to just use
               <see cref="M:Ionic.Zip.ZipFile.Read(System.String,Ionic.Zip.ReadOptions)">ZipFile.Read(String, ReadOptions)</see>.  This
               overload is useful when when the zip archive content is
               available from an already-open stream. The stream must be
               open and readable and seekable when calling this method.  The
               stream is left open when the reading is completed.
             </para>
            
             <para>
               Using this overload, the stream is read using the default
               <c>System.Text.Encoding</c>, which is the <c>IBM437</c>
               codepage. If you want to specify the encoding to use when
               reading the zipfile content, see
               <see cref="M:Ionic.Zip.ZipFile.Read(System.IO.Stream,Ionic.Zip.ReadOptions)">ZipFile.Read(Stream, ReadOptions)</see>.  This
             </para>
            
             <para>
               Reading of zip content begins at the current position in the
               stream.  This means if you have a stream that concatenates
               regular data and zip data, if you position the open, readable
               stream at the start of the zip data, you will be able to read
               the zip archive using this constructor, or any of the ZipFile
               constructors that accept a <see cref="T:System.IO.Stream"/> as
               input. Some examples of where this might be useful: the zip
               content is concatenated at the end of a regular EXE file, as
               some self-extracting archives do.  (Note: SFX files produced
               by DotNetZip do not work this way; they can be read as normal
               ZIP files). Another example might be a stream being read from
               a database, where the zip content is embedded within an
               aggregate stream of data.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example shows how to Read zip content from a stream, and
               extract one entry into a different stream. In this example,
               the filename "NameOfEntryInArchive.doc", refers only to the
               name of the entry within the zip archive.  A file by that
               name is not created in the filesystem.  The I/O is done
               strictly with the given streams.
             </para>
            
             <code>
             using (ZipFile zip = ZipFile.Read(InputStream))
             {
                zip.Extract("NameOfEntryInArchive.doc", OutputStream);
             }
             </code>
            
             <code lang="VB">
             Using zip as ZipFile = ZipFile.Read(InputStream)
                zip.Extract("NameOfEntryInArchive.doc", OutputStream)
             End Using
             </code>
             </example>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <returns>The ZipFile instance read from the stream</returns>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.Read(System.IO.Stream,Ionic.Zip.ReadOptions)">
             <summary>
               Reads a zip file archive from the given stream using the
               specified options.
             </summary>
            
             <remarks>
            
             <para>
               When reading from a file, it's probably easier to just use
               <see cref="M:Ionic.Zip.ZipFile.Read(System.String,Ionic.Zip.ReadOptions)">ZipFile.Read(String, ReadOptions)</see>.  This
               overload is useful when when the zip archive content is
               available from an already-open stream. The stream must be
               open and readable and seekable when calling this method.  The
               stream is left open when the reading is completed.
             </para>
            
             <para>
               Reading of zip content begins at the current position in the
               stream.  This means if you have a stream that concatenates
               regular data and zip data, if you position the open, readable
               stream at the start of the zip data, you will be able to read
               the zip archive using this constructor, or any of the ZipFile
               constructors that accept a <see cref="T:System.IO.Stream"/> as
               input. Some examples of where this might be useful: the zip
               content is concatenated at the end of a regular EXE file, as
               some self-extracting archives do.  (Note: SFX files produced
               by DotNetZip do not work this way; they can be read as normal
               ZIP files). Another example might be a stream being read from
               a database, where the zip content is embedded within an
               aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="options">
               The set of options to use when reading the zip file.
             </param>
            
             <exception cref="T:System.Exception">
               Thrown if the zip archive cannot be read.
             </exception>
            
             <returns>The ZipFile instance read from the stream.</returns>
            
             <seealso cref="M:Ionic.Zip.ZipFile.Read(System.String,Ionic.Zip.ReadOptions)"/>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.Read(System.IO.Stream,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{Ionic.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, using the specified text Encoding, the
             specified TextWriter for status messages,
             and the specified ReadProgress event handler.
             </summary>
            
             <remarks>
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream"/> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written
             during operations on the <c>ZipFile</c>.  For example, in a console
             application, System.Console.Out works, and will get a message for each entry
             added to the ZipFile.  If the TextWriter is <c>null</c>, no verbose messages
             are written.
             </param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8
             encoding bit set.  Be careful specifying the encoding.  If the value you use
             here is not the same as the Encoding used when the zip archive was created
             (possibly by a different archiver) you will get unexpected results and
             possibly exceptions.  See the <see cref="P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
            
             <param name="readProgress">
             An event handler for Read operations.
             </param>
            
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.IsZipFile(System.String)">
             <summary>
             Checks the given file to see if it appears to be a valid zip file.
             </summary>
             <remarks>
            
             <para>
               Calling this method is equivalent to calling <see cref="M:Ionic.Zip.ZipFile.IsZipFile(System.String,System.Boolean)"/> with the testExtract parameter set to false.
             </para>
             </remarks>
            
             <param name="fileName">The file to check.</param>
             <returns>true if the file appears to be a zip file.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.IsZipFile(System.String,System.Boolean)">
             <summary>
             Checks a file to see if it is a valid zip file.
             </summary>
            
             <remarks>
             <para>
               This method opens the specified zip file, reads in the zip archive,
               verifying the ZIP metadata as it reads.
             </para>
            
             <para>
               If everything succeeds, then the method returns true.  If anything fails -
               for example if an incorrect signature or CRC is found, indicating a
               corrupt file, the the method returns false.  This method also returns
               false for a file that does not exist.
             </para>
            
             <para>
               If <paramref name="testExtract"/> is true, as part of its check, this
               method reads in the content for each entry, expands it, and checks CRCs.
               This provides an additional check beyond verifying the zip header and
               directory data.
             </para>
            
             <para>
               If <paramref name="testExtract"/> is true, and if any of the zip entries
               are protected with a password, this method will return false.  If you want
               to verify a <c>ZipFile</c> that has entries which are protected with a
               password, you will need to do that manually.
             </para>
            
             </remarks>
            
             <param name="fileName">The zip file to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.IsZipFile(System.IO.Stream,System.Boolean)">
             <summary>
             Checks a stream to see if it contains a valid zip archive.
             </summary>
            
             <remarks>
             <para>
             This method reads the zip archive contained in the specified stream, verifying
             the ZIP metadata as it reads.  If testExtract is true, this method also extracts
             each entry in the archive, dumping all the bits into <see cref="F:System.IO.Stream.Null"/>.
             </para>
            
             <para>
             If everything succeeds, then the method returns true.  If anything fails -
             for example if an incorrect signature or CRC is found, indicating a corrupt
             file, the the method returns false.  This method also returns false for a
             file that does not exist.
             </para>
            
             <para>
             If <c>testExtract</c> is true, this method reads in the content for each
             entry, expands it, and checks CRCs.  This provides an additional check
             beyond verifying the zip header data.
             </para>
            
             <para>
             If <c>testExtract</c> is true, and if any of the zip entries are protected
             with a password, this method will return false.  If you want to verify a
             ZipFile that has entries which are protected with a password, you will need
             to do that manually.
             </para>
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.IsZipFile(System.String,System.Boolean)"/>
            
             <param name="stream">The stream to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the stream contains a valid zip archive.</returns>
        </member>
        <member name="M:Ionic.Zip.ZipFile.DeleteFileWithRetry(System.String)">
             <summary>
               Delete file with retry on UnauthorizedAccessException.
             </summary>
            
             <remarks>
               <para>
                 When calling File.Delete() on a file that has been "recently"
                 created, the call sometimes fails with
                 UnauthorizedAccessException. This method simply retries the Delete 3
                 times with a sleep between tries.
               </para>
             </remarks>
            
             <param name='filename'>the name of the file to be deleted</param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.Save">
             <summary>
               Saves the Zip archive to a file, specified by the Name property of the
               <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               The <c>ZipFile</c> instance is written to storage, typically a zip file
               in a filesystem, only when the caller calls <c>Save</c>.  In the typical
               case, the Save operation writes the zip content to a temporary file, and
               then renames the temporary file to the desired name. If necessary, this
               method will delete a pre-existing file before the rename.
             </para>
            
             <para>
               The <see cref="P:Ionic.Zip.ZipFile.Name"/> property is specified either explicitly,
               or implicitly using one of the parameterized ZipFile constructors.  For
               COM Automation clients, the <c>Name</c> property must be set explicitly,
               because COM Automation clients cannot call parameterized constructors.
             </para>
            
             <para>
               When using a filesystem file for the Zip output, it is possible to call
               <c>Save</c> multiple times on the <c>ZipFile</c> instance. With each
               call the zip content is re-written to the same output file.
             </para>
            
             <para>
               Data for entries that have been added to the <c>ZipFile</c> instance is
               written to the output when the <c>Save</c> method is called. This means
               that the input streams for those entries must be available at the time
               the application calls <c>Save</c>.  If, for example, the application
               adds entries with <c>AddEntry</c> using a dynamically-allocated
               <c>MemoryStream</c>, the memory stream must not have been disposed
               before the call to <c>Save</c>. See the <see cref="P:Ionic.Zip.ZipEntry.InputStream"/> property for more discussion of the
               availability requirements of the input stream for an entry, and an
               approach for providing just-in-time stream lifecycle management.
             </para>
            
             </remarks>
            
             <seealso cref="M:Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)"/>
            
             <exception cref="T:Ionic.Zip.BadStateException">
               Thrown if you haven't specified a location or stream for saving the zip,
               either in the constructor or by setting the Name property, or if you try
               to save a regular zip archive to a filename with a .exe extension.
             </exception>
            
             <exception cref="T:System.OverflowException">
               Thrown if <see cref="P:Ionic.Zip.ZipFile.MaxOutputSegmentSize"/> is non-zero, and the number
               of segments that would be generated for the spanned zip file during the
               save operation exceeds 99.  If this happens, you need to increase the
               segment size.
             </exception>
            
        </member>
        <member name="M:Ionic.Zip.ZipFile.Save(System.String)">
             <summary>
             Save the file to a new zipfile, with the given name.
             </summary>
            
             <remarks>
             <para>
             This method allows the application to explicitly specify the name of the zip
             file when saving. Use this when creating a new zip file, or when
             updating a zip archive.
             </para>
            
             <para>
             An application can also save a zip archive in several places by calling this
             method multiple times in succession, with different filenames.
             </para>
            
             <para>
             The <c>ZipFile</c> instance is written to storage, typically a zip file in a
             filesystem, only when the caller calls <c>Save</c>.  The Save operation writes
             the zip content to a temporary file, and then renames the temporary file
             to the desired name. If necessary, this method will delete a pre-existing file
             before the rename.
             </para>
            
             </remarks>
            
             <exception cref="T:System.ArgumentException">
             Thrown if you specify a directory for the filename.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to save to. Existing files will
             be overwritten with great prejudice.
             </param>
            
             <example>
             This example shows how to create and Save a zip file.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               zip.AddDirectory(@"c:\reports\January");
               zip.Save("January.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile()
               zip.AddDirectory("c:\reports\January")
               zip.Save("January.zip")
             End Using
             </code>
            
             </example>
            
             <example>
             This example shows how to update a zip file.
             <code>
             using (ZipFile zip = ZipFile.Read("ExistingArchive.zip"))
             {
               zip.AddFile("NewData.csv");
               zip.Save("UpdatedArchive.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read("ExistingArchive.zip")
               zip.AddFile("NewData.csv")
               zip.Save("UpdatedArchive.zip")
             End Using
             </code>
            
             </example>
        </member>
        <member name="M:Ionic.Zip.ZipFile.Save(System.IO.Stream)">
             <summary>
               Save the zip archive to the specified stream.
             </summary>
            
             <remarks>
             <para>
               The <c>ZipFile</c> instance is written to storage - typically a zip file
               in a filesystem, but using this overload, the storage can be anything
               accessible via a writable stream - only when the caller calls <c>Save</c>.
             </para>
            
             <para>
               Use this method to save the zip content to a stream directly.  A common
               scenario is an ASP.NET application that dynamically generates a zip file
               and allows the browser to download it. The application can call
               <c>Save(Response.OutputStream)</c> to write a zipfile directly to the
               output stream, without creating a zip file on the disk on the ASP.NET
               server.
             </para>
            
             <para>
               Be careful when saving a file to a non-seekable stream, including
               <c>Response.OutputStream</c>. When DotNetZip writes to a non-seekable
               stream, the zip archive is formatted in such a way that may not be
               compatible with all zip tools on all platforms.  It's a perfectly legal
               and compliant zip file, but some people have reported problems opening
               files produced this way using the Mac OS archive utility.
             </para>
            
             </remarks>
            
             <example>
            
               This example saves the zipfile content into a MemoryStream, and
               then gets the array of bytes from that MemoryStream.
            
             <code lang="C#">
             using (var zip = new Ionic.Zip.ZipFile())
             {
                 zip.CompressionLevel= Ionic.Zlib.CompressionLevel.BestCompression;
                 zip.Password = "VerySecret.";
                 zip.Encryption = EncryptionAlgorithm.WinZipAes128;
                 zip.AddFile(sourceFileName);
                 MemoryStream output = new MemoryStream();
                 zip.Save(output);
            
                 byte[] zipbytes = output.ToArray();
             }
             </code>
             </example>
            
             <example>
             <para>
               This example shows a pitfall you should avoid. DO NOT read
               from a stream, then try to save to the same stream.  DO
               NOT DO THIS:
             </para>
            
             <code lang="C#">
             using (var fs = new FileSteeam(filename, FileMode.Open))
             {
               using (var zip = Ionic.Zip.ZipFile.Read(inputStream))
               {
                 zip.AddEntry("Name1.txt", "this is the content");
                 zip.Save(inputStream);  // NO NO NO!!
               }
             }
             </code>
            
             <para>
               Better like this:
             </para>
            
             <code lang="C#">
             using (var zip = Ionic.Zip.ZipFile.Read(filename))
             {
                 zip.AddEntry("Name1.txt", "this is the content");
                 zip.Save();  // YES!
             }
             </code>
            
             </example>
            
             <param name="outputStream">
               The <c>System.IO.Stream</c> to write to. It must be
               writable. If you created the ZipFile instanct by calling
               ZipFile.Read(), this stream must not be the same stream
               you passed to ZipFile.Read().
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String)">
             <summary>
               Adds to the ZipFile a set of files from the current working directory on
               disk, that conform to the specified criteria.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the the current working directory matching
               the specified criteria, and adds them to the ZipFile.
             </para>
            
             <para>
               Specify the criteria in statements of 3 elements: a noun, an operator, and
               a value.  Consider the string "name != *.doc" .  The noun is "name".  The
               operator is "!=", implying "Not Equal".  The value is "*.doc".  That
               criterion, in English, says "all files with a name that does not end in
               the .doc extension."
             </para>
            
             <para>
               Supported nouns include "name" (or "filename") for the filename; "atime",
               "mtime", and "ctime" for last access time, last modfied time, and created
               time of the file, respectively; "attributes" (or "attrs") for the file
               attributes; "size" (or "length") for the file length (uncompressed), and
               "type" for the type of object, either a file or a directory.  The
               "attributes", "name" and "type" nouns both support = and != as operators.
               The "size", "atime", "mtime", and "ctime" nouns support = and !=, and
               &gt;, &gt;=, &lt;, &lt;= as well. The times are taken to be expressed in
               local time.
             </para>
            
             <para>
             Specify values for the file attributes as a string with one or more of the
             characters H,R,S,A,I,L in any order, implying file attributes of Hidden,
             ReadOnly, System, Archive, NotContextIndexed, and ReparsePoint (symbolic
             link) respectively.
             </para>
            
             <para>
             To specify a time, use YYYY-MM-DD-HH:mm:ss or YYYY/MM/DD-HH:mm:ss as the
             format.  If you omit the HH:mm:ss portion, it is assumed to be 00:00:00
             (midnight).
             </para>
            
             <para>
             The value for a size criterion is expressed in integer quantities of bytes,
             kilobytes (use k or kb after the number), megabytes (m or mb), or gigabytes
             (g or gb).
             </para>
            
             <para>
             The value for a name is a pattern to match against the filename, potentially
             including wildcards.  The pattern follows CMD.exe glob rules: * implies one
             or more of any character, while ?  implies one character.  If the name
             pattern contains any slashes, it is matched to the entire filename,
             including the path; otherwise, it is matched against only the filename
             without the path.  This means a pattern of "*\*.*" matches all files one
             directory level deep, while a pattern of "*.*" matches all files in all
             directories.
             </para>
            
             <para>
             To specify a name pattern that includes spaces, use single quotes around the
             pattern.  A pattern of "'* *.*'" will match all files that have spaces in
             the filename.  The full criteria string for that would be "name = '* *.*'" .
             </para>
            
             <para>
             The value for a type criterion is either F (implying a file) or D (implying
             a directory).
             </para>
            
             <para>
             Some examples:
             </para>
            
             <list type="table">
               <listheader>
                 <term>criteria</term>
                 <description>Files retrieved</description>
               </listheader>
            
               <item>
                 <term>name != *.xls </term>
                 <description>any file with an extension that is not .xls
                 </description>
               </item>
            
               <item>
                 <term>name = *.mp3 </term>
                 <description>any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>*.mp3</term>
                 <description>(same as above) any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>attributes = A </term>
                 <description>all files whose attributes include the Archive bit.
                 </description>
               </item>
            
               <item>
                 <term>attributes != H </term>
                 <description>all files whose attributes do not include the Hidden bit.
                 </description>
               </item>
            
               <item>
                 <term>mtime > 2009-01-01</term>
                 <description>all files with a last modified time after January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>size > 2gb</term>
                 <description>all files whose uncompressed size is greater than 2gb.
                 </description>
               </item>
            
               <item>
                 <term>type = D</term>
                 <description>all directories in the filesystem. </description>
               </item>
            
             </list>
            
             <para>
             You can combine criteria with the conjunctions AND or OR. Using a string
             like "name = *.txt AND size &gt;= 100k" for the selectionCriteria retrieves
             entries whose names end in .txt, and whose uncompressed size is greater than
             or equal to 100 kilobytes.
             </para>
            
             <para>
             For more complex combinations of criteria, you can use parenthesis to group
             clauses in the boolean logic.  Without parenthesis, the precedence of the
             criterion atoms is determined by order of appearance.  Unlike the C#
             language, the AND conjunction does not take precendence over the logical OR.
             This is important only in strings that contain 3 or more criterion atoms.
             In other words, "name = *.txt and size &gt; 1000 or attributes = H" implies
             "((name = *.txt AND size &gt; 1000) OR attributes = H)" while "attributes =
             H OR name = *.txt and size &gt; 1000" evaluates to "((attributes = H OR name
             = *.txt) AND size &gt; 1000)".  When in doubt, use parenthesis.
             </para>
            
             <para>
             Using time properties requires some extra care. If you want to retrieve all
             entries that were last updated on 2009 February 14, specify a time range
             like so:"mtime &gt;= 2009-02-14 AND mtime &lt; 2009-02-15".  Read this to
             say: all files updated after 12:00am on February 14th, until 12:00am on
             February 15th.  You can use the same bracketing approach to specify any time
             period - a year, a month, a week, and so on.
             </para>
            
             <para>
             The syntax allows one special case: if you provide a string with no spaces, it is
             treated as a pattern to match for the filename.  Therefore a string like "*.xls"
             will be equivalent to specifying "name = *.xls".
             </para>
            
             <para>
             There is no logic in this method that insures that the file inclusion
             criteria are internally consistent.  For example, it's possible to specify
             criteria that says the file must have a size of less than 100 bytes, as well
             as a size that is greater than 1000 bytes. Obviously no file will ever
             satisfy such criteria, but this method does not detect such logical
             inconsistencies. The caller is responsible for insuring the criteria are
             sensible.
             </para>
            
             <para>
               Using this method, the file selection does not recurse into
               subdirectories, and the full path of the selected files is included in the
               entries added into the zip archive.  If you don't like these behaviors,
               see the other overloads of this method.
             </para>
             </remarks>
            
             <example>
             This example zips up all *.csv files in the current working directory.
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // To just match on filename wildcards,
                 // use the shorthand form of the selectionCriteria string.
                 zip.AddSelectedFiles("*.csv");
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 zip.AddSelectedFiles("*.csv")
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a set of files from the disk that conform to the
               specified criteria, optionally recursing into subdirectories.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the the current working directory matching
               the specified criteria, and adds them to the ZipFile.  If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories, and the directory structure in the filesystem is
               reproduced in the zip archive, rooted at the current working directory.
             </para>
            
             <para>
               Using this method, the full path of the selected files is included in the
               entries added into the zip archive.  If you don't want this behavior, use
               one of the overloads of this method that allows the specification of a
               <c>directoryInArchive</c>.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.xml files in the current working directory, or any
               subdirectory, that are larger than 1mb.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size &gt; 1024kb", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size &gt; 1024kb", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="recurseDirectories">
               If true, the file selection will recurse into subdirectories.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)">
             <summary>
               Adds to the ZipFile a set of files from a specified directory in the
               filesystem, that conform to the specified criteria.
             </summary>
            
             <remarks>
             <para>
               This method selects files that conform to the specified criteria, from the
               the specified directory on disk, and adds them to the ZipFile.  The search
               does not recurse into subdirectores.
             </para>
            
             <para>
               Using this method, the full filesystem path of the files on disk is
               reproduced on the entries added to the zip file.  If you don't want this
               behavior, use one of the other overloads of this method.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.xml files larger than 1mb in the directory
               given by "d:\rawdata".
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size &gt; 1024kb", "d:\\rawdata");
                 zip.Save(PathToZipArchive);
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size &gt; 1024kb", "d:\rawdata)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="directoryOnDisk">
             The name of the directory on the disk from which to select files.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a set of files from the specified directory on disk,
               that conform to the specified criteria.
             </summary>
            
             <remarks>
            
             <para>
               This method selects files from the the specified disk directory matching
               the specified selection criteria, and adds them to the ZipFile.  If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories.
             </para>
            
             <para>
               The full directory structure in the filesystem is reproduced on the
               entries added to the zip archive.  If you don't want this behavior, use
               one of the overloads of this method that allows the specification of a
               <c>directoryInArchive</c>.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             </remarks>
            
             <example>
            
               This example zips up all *.csv files in the "files" directory, or any
               subdirectory, that have been saved since 2009 February 14th.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.csv  and  mtime &gt; 2009-02-14", "files", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.csv  and  mtime &gt; 2009-02-14", "files", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <example>
               This example zips up all files in the current working
               directory, and all its child directories, except those in
               the <c>excludethis</c> subdirectory.
             <code lang="VB">
             Using Zip As ZipFile = New ZipFile(zipfile)
               Zip.AddSelectedFfiles("name != 'excludethis\*.*'", datapath, True)
               Zip.Save()
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="directoryOnDisk">
               The filesystem path from which to select files.
             </param>
            
             <param name="recurseDirectories">
               If true, the file selection will recurse into subdirectories.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.String)">
             <summary>
               Adds to the ZipFile a selection of files from the specified directory on
               disk, that conform to the specified criteria, and using a specified root
               path for entries added to the zip archive.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the specified disk directory matching the
               specified selection criteria, and adds those files to the ZipFile, using
               the specified directory path in the archive.  The search does not recurse
               into subdirectories.  For details on the syntax for the selectionCriteria
               parameter, see <see cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.psd files in the "photos" directory that have
               been saved since 2009 February 14th, and puts them all in a zip file,
               using the directory name of "content" in the zip archive itself. When the
               zip archive is unzipped, the folder containing the .psd files will be
               named "content".
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.psd  and  mtime &gt; 2009-02-14", "photos", "content");
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile
                 zip.AddSelectedFiles("name = *.psd  and  mtime &gt; 2009-02-14", "photos", "content")
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               null (nothing in VB) will use the path on the file name, if any; in other
               words it would use <c>directoryOnDisk</c>, plus any subdirectory.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a selection of files from the specified directory on
               disk, that conform to the specified criteria, optionally recursing through
               subdirectories, and using a specified root path for entries added to the
               zip archive.
             </summary>
            
             <remarks>
               This method selects files from the specified disk directory that match the
               specified selection criteria, and adds those files to the ZipFile, using
               the specified directory path in the archive. If <c>recurseDirectories</c>
               is true, files are also selected from subdirectories, and the directory
               structure in the filesystem is reproduced in the zip archive, rooted at
               the directory specified by <c>directoryOnDisk</c>.  For details on the
               syntax for the selectionCriteria parameter, see <see cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </remarks>
            
             <example>
            
               This example zips up all files that are NOT *.pst files, in the current
               working directory and any subdirectories.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddSelectedFiles("name != *.pst", SourceDirectory, "backup", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile
                 zip.AddSelectedFiles("name != *.pst", SourceDirectory, "backup", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               null (nothing in VB) will use the path on the file name, if any; in other
               words it would use <c>directoryOnDisk</c>, plus any subdirectory.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <param name="recurseDirectories">
               If true, the method also scans subdirectories for files matching the
               criteria.
             </param>
        </member>
        <member name="M:Ionic.Zip.ZipFile.UpdateSelectedFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
               Updates the ZipFile with a selection of files from the disk that conform
               to the specified criteria.
             </summary>
            
             <remarks>
               This method selects files from the specified disk directory that match the
               specified selection criteria, and Updates the <c>ZipFile</c> with those
               files, using the specified directory path in the archive. If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories, and the directory structure in the filesystem is
               reproduced in the zip archive, rooted at the directory specified by
               <c>directoryOnDisk</c>.  For details on the syntax for the
               selectionCriteria parameter, see <see cref="M:Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </remarks>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>. This path may, or may not, correspond to a
               real directory in the current filesystem. If the files within the zip
               are later extracted, this is the path used for the extracted file.
               Passing null (nothing in VB) will use the path on the file name, if
               any; in other words it would use <c>directoryOnDisk</c>, plus any
               subdirectory.  Passing the empty 